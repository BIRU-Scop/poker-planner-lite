{
  "pipes": [],
  "interfaces": [
    {
      "name": "EnvironmentConfig",
      "id": "interface-EnvironmentConfig-0cf18ec6f89b0c17c38951a70170d4eeba0ffa8ac927891d1313d95745b90b53fc35e8bf631960479a8e6cfc94309b773746a5a912b39418b79aee175e805d48",
      "file": "src/environments/environment-type.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { InjectionToken } from '@angular/core';\nimport { IMqttServiceOptions } from 'ngx-mqtt';\n\nexport const ENVIRONMENT_CONFIG = new InjectionToken('ENVIRONMENT_CONFIG');\n\nexport interface EnvironmentConfig {\n  appVersion: string;\n  production: boolean;\n  env: 'dev' | 'staging' | 'production';\n\n  mqttConfigOptions: IMqttServiceOptions;\n}\n\nexport const mqttDefaults: IMqttServiceOptions = {\n  port: 8080,\n  path: '/mqtt',\n  protocolVersion: 5,\n};\n",
      "properties": [
        {
          "name": "appVersion",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "env",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"dev\" | \"staging\" | \"production\"",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "mqttConfigOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMqttServiceOptions",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "production",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "User",
      "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
      "file": "src/stories/user.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface User {\n  name: string;\n}\n",
      "properties": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "Window",
      "id": "interface-Window-5737635310ac7872b7ea4fb6d1080eb56ec1480ae82eb201454729579370f16e10a30d55bc3a9421de0d3e0939e3cd63f9b19f7968cfa7b3591475eee373a55d",
      "file": "src/libs/utils/with-devtools.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { SignalStoreFeature } from '@ngrx/signals';\nimport { SignalStoreFeatureResult } from '@ngrx/signals/src/signal-store-models';\nimport { effect, inject, PLATFORM_ID, signal, Signal } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__:\n      | {\n          connect: (options: { name: string }) => {\n            send: (action: Action, state: Record<string, unknown>) => void;\n          };\n        }\n      | undefined;\n  }\n}\n\ntype EmptyFeatureResult = {\n  state: NonNullable<unknown>;\n  signals: NonNullable<unknown>;\n  methods: NonNullable<unknown>;\n};\nexport type Action = { type: string };\n\nconst storeRegistry = signal<Record<string, Signal<unknown>>>({});\n\nlet currentActionNames = new Set<string>();\n\nlet synchronizationInitialized = false;\n\nfunction initSynchronization() {\n  effect(() => {\n    if (!connection) {\n      return;\n    }\n\n    const stores = storeRegistry();\n    const rootState: Record<string, unknown> = {};\n    for (const name in stores) {\n      const store = stores[name];\n      rootState[name] = store();\n    }\n\n    const names = Array.from(currentActionNames);\n    const type = names.length ? names.join(', ') : 'Store Update';\n    currentActionNames = new Set<string>();\n\n    connection.send({ type }, rootState);\n  });\n}\n\nfunction getValueFromSymbol(obj: unknown, symbol: symbol) {\n  if (typeof obj === 'object' && obj && symbol in obj) {\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    return (obj as { [key: symbol]: any })[symbol];\n  }\n}\n\nfunction getStoreSignal(store: unknown): Signal<unknown> {\n  const [signalStateKey] = Object.getOwnPropertySymbols(store);\n  if (!signalStateKey) {\n    throw new Error('Cannot find State Signal');\n  }\n\n  return getValueFromSymbol(store, signalStateKey);\n}\n\ntype ConnectResponse = {\n  send: (action: Action, state: Record<string, unknown>) => void;\n};\nlet connection: ConnectResponse | undefined;\n\n/**\n * required for testing. is not exported during build\n */\nexport function reset() {\n  connection = undefined;\n  synchronizationInitialized = false;\n  storeRegistry.set({});\n}\n\n/**\n * @param name store's name as it should appear in the DevTools\n */\nexport function withDevtools<Input extends SignalStoreFeatureResult>(\n  name: string\n): SignalStoreFeature<Input, EmptyFeatureResult> {\n  return store => {\n    const isServer = isPlatformServer(inject(PLATFORM_ID));\n    if (isServer) {\n      return store;\n    }\n\n    const extensions = window.__REDUX_DEVTOOLS_EXTENSION__;\n    if (!extensions) {\n      return store;\n    }\n\n    if (!connection) {\n      connection = extensions.connect({\n        name: 'NgRx Signal Store',\n      });\n    }\n\n    const storeSignal = getStoreSignal(store);\n    storeRegistry.update(value => ({\n      ...value,\n      [name]: storeSignal,\n    }));\n\n    if (!synchronizationInitialized) {\n      initSynchronization();\n      synchronizationInitialized = true;\n    }\n\n    return store;\n  };\n}\n",
      "properties": [
        {
          "name": "__REDUX_DEVTOOLS_EXTENSION__",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type | undefined",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    }
  ],
  "injectables": [
    {
      "name": "RoomService",
      "id": "injectable-RoomService-18213722ba3865e687ecb5072ea9eee1d0fd508d2066cf8a6b9f4fe8299dda1f908ac7de6f24579012edc822867d69671d813fd5a946e5590ca92e2382ebb415",
      "file": "src/libs/data-models/room/room.service.ts",
      "properties": [
        {
          "name": "mqttService",
          "defaultValue": "inject(MqttService)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [148]
        }
      ],
      "methods": [
        {
          "name": "addPlayerToRoom",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "playerName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onComplete",
              "type": " | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "undefined"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "playerName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onComplete",
              "type": " | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "undefined",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCurrentRound",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPlayers",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<literal type>",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getVotes",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<literal type>",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "listAll",
          "args": [],
          "optional": false,
          "returnType": "Observable<string>",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "vote",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "currentRound",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "user",
              "type": "UserModel | null",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "voteOption",
              "type": "VoteChoice",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 92,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "currentRound",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "user",
              "type": "UserModel | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "voteOption",
              "type": "VoteChoice",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { distinct, map, Observable, retry, tap } from 'rxjs';\nimport { IMqttMessage, MqttService } from 'ngx-mqtt';\nimport { VoteChoice } from './room.model';\nimport { UserModel, UserRoleEnum } from '../user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoomService {\n  readonly mqttService = inject(MqttService);\n  listAll(): Observable<string> {\n    return this.mqttService\n      .observe('rooms/+/connected-players/+', { qos: 0 })\n      .pipe(\n        tap((message: IMqttMessage) => console.debug(message)),\n        map((message: IMqttMessage) => {\n          const result = /^rooms\\/([-\\w]+)\\//.exec(message.topic);\n          return result ? result[1] : '';\n        }),\n        distinct()\n      );\n  }\n  addPlayerToRoom(\n    roomName: string,\n    playerName: string,\n    onComplete: (() => void) | undefined = undefined\n  ): void {\n    this.mqttService\n      .publish(`rooms/${roomName}/connected-players/${playerName}`, '1', {\n        qos: 1,\n        retain: true,\n        properties: {\n          payloadFormatIndicator: true,\n          messageExpiryInterval: 21600, // 6 hours\n        },\n      })\n      .pipe(retry({ count: 3, delay: 1000, resetOnSuccess: true }))\n      .subscribe({ complete: onComplete, error: console.error });\n  }\n\n  getPlayers(\n    roomName: string\n  ): Observable<{ player: string; isDeleted: boolean }> {\n    return this.mqttService\n      .observe(`rooms/${roomName}/connected-players/+`, { qos: 0 })\n      .pipe(\n        tap((message: IMqttMessage) => console.debug(message)),\n        map((message: IMqttMessage) => {\n          const result = /([-\\w]+)$/.exec(message.topic);\n          const playerName = result ? result[1] : '';\n          return {\n            player: playerName,\n            isDeleted: message.payload.toString() !== '1',\n          };\n        })\n      );\n  }\n\n  getCurrentRound(roomName: string) {\n    return this.mqttService\n      .observe(`rooms/${roomName}/current-round/`, { qos: 0 })\n      .pipe(\n        tap((message: IMqttMessage) => console.debug(message)),\n        map((message: IMqttMessage) => Number(message.payload.toString()))\n      );\n  }\n\n  getVotes(roomName: string): Observable<{\n    roundNumber: number;\n    player: string;\n    voteOption: VoteChoice;\n  }> {\n    return this.mqttService\n      .observe(`rooms/${roomName}/votes/#`, { qos: 0 })\n      .pipe(\n        tap((message: IMqttMessage) => console.debug(message)),\n        map((message: IMqttMessage) => {\n          const result = /(\\d+)\\/([-\\w]+)$/.exec(message.topic);\n          console.debug(result);\n          const roundNumber = result ? Number(result[1]) : 0;\n          const player = result ? result[2] : '';\n          return {\n            roundNumber: roundNumber,\n            player: player,\n            voteOption: message.payload.toString() as VoteChoice,\n          };\n        })\n      );\n  }\n\n  vote(\n    roomName: string,\n    currentRound: number,\n    user: UserModel | null,\n    voteOption: VoteChoice\n  ): void {\n    if (!user || user.role == UserRoleEnum.Observer) {\n      return;\n    }\n    this.mqttService\n      .publish(\n        `rooms/${roomName}/votes/${currentRound}/${user.name}`,\n        voteOption,\n        {\n          qos: 1,\n          retain: true,\n          properties: {\n            payloadFormatIndicator: true,\n            messageExpiryInterval: 300, // 5min\n          },\n        }\n      )\n      .pipe(retry({ count: 3, delay: 1000, resetOnSuccess: true }))\n      .subscribe({ error: console.error });\n  }\n}\n",
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "TemplatePageTitleStrategy",
      "id": "injectable-TemplatePageTitleStrategy-c1c883df75bd1ea560ba8f36ee1098a9b6c546fa8d4e46fd3e952685e0a147d2e87f89bd160b722e1bdd5d93fa0cb7da16a1b0ecb3c790a14b387277b41589ad",
      "file": "src/app/app.config.ts",
      "properties": [],
      "methods": [
        {
          "name": "updateTitle",
          "args": [
            {
              "name": "routerState",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [164],
          "jsdoctags": [
            {
              "name": "routerState",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  ApplicationConfig,\n  importProvidersFrom,\n  Injectable,\n} from '@angular/core';\nimport {\n  provideRouter,\n  RouterStateSnapshot,\n  TitleStrategy,\n  withComponentInputBinding,\n} from '@angular/router';\n\nimport { routes } from './app.routes';\nimport { Title } from '@angular/platform-browser';\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\nimport { MqttModule } from 'ngx-mqtt';\nimport { environment } from '../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TemplatePageTitleStrategy extends TitleStrategy {\n  constructor(private readonly title: Title) {\n    super();\n  }\n  override updateTitle(routerState: RouterStateSnapshot) {\n    const title = this.buildTitle(routerState);\n    if (title !== undefined) {\n      this.title.setTitle(`Poker Planner Lite | ${title}`);\n    }\n  }\n}\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes, withComponentInputBinding()),\n    { provide: TitleStrategy, useClass: TemplatePageTitleStrategy },\n    provideAnimationsAsync(),\n    importProvidersFrom(MqttModule.forRoot(environment.mqttConfigOptions)),\n  ],\n};\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "title",
            "type": "Title",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "title",
            "type": "Title",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": ["TitleStrategy"],
      "type": "injectable"
    },
    {
      "name": "UserService",
      "id": "injectable-UserService-c8cd8f13dd269da839180f9557967bc69f53bb5a5406f6835c95b4c7a337e60c06f4f40d2914deed1db01e2d96cde3fff04666ae0411b7a0b472608653a9716e",
      "file": "src/libs/data-models/user/user.service.ts",
      "properties": [],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {}\n",
      "extends": [],
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-ee62d3f5c8569cd6d5a7977d8d10d5bb7bc10401a32e53a7d32613524eeef6230b812c4671443fa652638907c530f1e1363d8d0e425b04286dc8a1a2559a9a26",
      "file": "src/app/app.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": [],
      "styles": [""],
      "template": "<main class=\"mat-typography\">\n  <router-outlet />\n</main>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "'poker-planner-lite'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "RouterOutlet"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [RouterOutlet],\n  template: `\n    <main class=\"mat-typography\">\n      <router-outlet />\n    </main>\n  `,\n  styles: ``,\n})\nexport class AppComponent {\n  title = 'poker-planner-lite';\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
      "file": "src/stories/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-button",
      "styleUrls": ["./button.css"],
      "styles": [],
      "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "backgroundColor",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWhat background color to use\n",
          "description": "<p>What background color to use</p>\n",
          "line": 29,
          "type": "string",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "'Button'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 798,
              "end": 811,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 334,
              "tagName": {
                "pos": 799,
                "end": 807,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "required"
              },
              "comment": ""
            }
          ],
          "rawdescription": "\n\nButton contents\n\n",
          "description": "<p>Button contents</p>\n",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "primary",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIs this the principal call to action on the page?\n",
          "description": "<p>Is this the principal call to action on the page?</p>\n",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHow large should the button be?\n",
          "description": "<p>How large should the button be?</p>\n",
          "line": 35,
          "type": "\"small\" | \"medium\" | \"large\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOptional click handler\n",
          "description": "<p>Optional click handler</p>\n",
          "line": 49,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
          "styleUrl": "./button.css"
        }
      ],
      "stylesData": "",
      "extends": [],
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "[]",
            "returnType": "string[]",
            "line": 51
          }
        }
      }
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
      "file": "src/stories/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-header",
      "styleUrls": ["./header.css"],
      "styles": [],
      "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "User | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
          "styleUrl": "./header.css"
        }
      ],
      "stylesData": "",
      "extends": []
    },
    {
      "name": "LobbyComponent",
      "id": "component-LobbyComponent-5240aa4f95a8fd289396a52a2cbbe953165083e67da4aa91b000141b1c679993f846093dd1d59f7232bd15657fb122367a22d7a17b3bea82e3d8a80121378fd0",
      "file": "src/app/lobby/lobby.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "RoomStore"
        }
      ],
      "selector": "app-lobby",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"p-4\">\n  <div class=\"flex gap-1 items-center place-content-center\">\n    <img\n      class=\"max-w-28\"\n      ngSrc=\"assets/logo.svg\"\n      alt=\"Poker Planner Lite logo\"\n      width=\"289.25\"\n      height=\"284.7\"\n      priority />\n    <h1>Poker Planner Lite</h1>\n  </div>\n  <div class=\"flex justify-evenly pt-10\">\n    <button mat-flat-button color=\"primary\" (click)=\"openDialog()\">\n      Join a room\n    </button>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dialog",
          "defaultValue": "inject(MatDialog)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [148]
        },
        {
          "name": "store",
          "defaultValue": "inject(RoomStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "openDialog",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "NgOptimizedImage"
        },
        {
          "name": "MatCardModule",
          "type": "module"
        },
        {
          "name": "MatButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { RoomStore } from '@poker/data-models';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialog } from '@angular/material/dialog';\nimport { RoomListDialogComponent } from './room-list-dialog/room-list-dialog.component';\nimport { NgOptimizedImage } from '@angular/common';\n\n@Component({\n  selector: 'app-lobby',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgOptimizedImage, MatCardModule, MatButtonModule],\n  template: `\n    <div class=\"p-4\">\n      <div class=\"flex gap-1 items-center place-content-center\">\n        <img\n          class=\"max-w-28\"\n          ngSrc=\"assets/logo.svg\"\n          alt=\"Poker Planner Lite logo\"\n          width=\"289.25\"\n          height=\"284.7\"\n          priority />\n        <h1>Poker Planner Lite</h1>\n      </div>\n      <div class=\"flex justify-evenly pt-10\">\n        <button mat-flat-button color=\"primary\" (click)=\"openDialog()\">\n          Join a room\n        </button>\n      </div>\n    </div>\n  `,\n  styles: ``,\n  providers: [RoomStore],\n})\nexport class LobbyComponent {\n  readonly store = inject(RoomStore);\n  readonly dialog = inject(MatDialog);\n\n  constructor() {\n    this.store.listAll();\n  }\n\n  openDialog(): void {\n    this.dialog.open(RoomListDialogComponent, {\n      data: this.store,\n      maxHeight: '80vh',\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 38
      },
      "extends": []
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
      "file": "src/stories/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-page",
      "styleUrls": ["./page.css"],
      "styles": [],
      "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "User | null",
          "optional": false,
          "description": "",
          "line": 69
        }
      ],
      "methodsClass": [
        {
          "name": "doCreateAccount",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doLogin",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doLogout",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "HeaderComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
          "styleUrl": "./page.css"
        }
      ],
      "stylesData": "",
      "extends": []
    },
    {
      "name": "PageNotFoundComponent",
      "id": "component-PageNotFoundComponent-d0bdb4ce3548e0681c5f55f55be779da23823e5b1ae58e1198e9abde4e4390b4105aa7846c67eb55849a9f64da98d7433565d653e23228d98bc54255b3ade8cd",
      "file": "src/app/page-not-found/page-not-found.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-page-not-found",
      "styleUrls": [],
      "styles": [""],
      "template": "<p>404 page not found</p>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n  template: `<p>404 page not found</p>`,\n  styles: ``,\n})\nexport class PageNotFoundComponent {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "PokerCardComponent",
      "id": "component-PokerCardComponent-18a16354452efa10d0568d8efffc2fbec378bbc99cd004c8ccbc5c3eb6c4cce2f341e9d64b2e6e87d075cbeb4edc44c77a32d7e3e7d65e601cce340f818da878",
      "file": "src/app/room/poker-card/poker-card.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-poker-card",
      "styleUrls": [],
      "styles": [
        "\n    .private {\n      @apply bg-gray-200 hover:bg-gray-200 border-gray-400;\n    }\n    .active {\n      @apply bg-emerald-300 hover:bg-emerald-300 border-emerald-500;\n    }\n    .active:not(.private) {\n      @apply hover:bg-emerald-200 hover:border-emerald-400;\n    }\n  "
      ],
      "template": "<button\n  class=\"p-3 shadow group border-4 rounded-lg border-blue-400 bg-blue-100 hover:bg-blue-50 hover:border-blue-300\"\n  [ngClass]=\"\n    size() === 'S' ? ['w-16', 'h-20', 'p-2'] : ['w-20', 'h-28', 'p-3']\n  \"\n  [class.private]=\"private()\"\n  [class.active]=\"active()\"\n  [disabled]=\"disabled()\">\n  @if (private()) {\n    <div\n      class=\"h-full w-full bg-stripes\"\n      [ngClass]=\"\n        active()\n          ? ['bg-emerald-500', 'bg-stripes-emerald-300']\n          : ['bg-gray-400', 'bg-stripes-gray-200']\n      \"></div>\n  } @else {\n    <div\n      class=\"h-full w-full flex flex-col place-content-center rounded-md border\"\n      [ngClass]=\"\n        active()\n          ? [\n              'border-emerald-500',\n              'bg-slate-100',\n              'group-hover:bg-slate-50',\n              'group-hover:border-emerald-400'\n            ]\n          : [\n              'border-blue-400',\n              'bg-slate-100',\n              'group-hover:bg-slate-50',\n              'group-hover:border-blue-300'\n            ]\n      \">\n      <span class=\"\" [ngClass]=\"{ 'text-2xl': size() === 'L' }\">\n        {{ content() }}\n      </span>\n    </div>\n  }\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "active",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 68
        },
        {
          "name": "content",
          "defaultValue": "input.required<string | null>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "disabled",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 66
        },
        {
          "name": "private",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "size",
          "defaultValue": "input<'S' | 'L'>('S')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 65
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "NgClass"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { NgClass } from '@angular/common';\n\n@Component({\n  selector: 'app-poker-card',\n  standalone: true,\n  imports: [NgClass],\n  template: `\n    <button\n      class=\"p-3 shadow group border-4 rounded-lg border-blue-400 bg-blue-100 hover:bg-blue-50 hover:border-blue-300\"\n      [ngClass]=\"\n        size() === 'S' ? ['w-16', 'h-20', 'p-2'] : ['w-20', 'h-28', 'p-3']\n      \"\n      [class.private]=\"private()\"\n      [class.active]=\"active()\"\n      [disabled]=\"disabled()\">\n      @if (private()) {\n        <div\n          class=\"h-full w-full bg-stripes\"\n          [ngClass]=\"\n            active()\n              ? ['bg-emerald-500', 'bg-stripes-emerald-300']\n              : ['bg-gray-400', 'bg-stripes-gray-200']\n          \"></div>\n      } @else {\n        <div\n          class=\"h-full w-full flex flex-col place-content-center rounded-md border\"\n          [ngClass]=\"\n            active()\n              ? [\n                  'border-emerald-500',\n                  'bg-slate-100',\n                  'group-hover:bg-slate-50',\n                  'group-hover:border-emerald-400'\n                ]\n              : [\n                  'border-blue-400',\n                  'bg-slate-100',\n                  'group-hover:bg-slate-50',\n                  'group-hover:border-blue-300'\n                ]\n          \">\n          <span class=\"\" [ngClass]=\"{ 'text-2xl': size() === 'L' }\">\n            {{ content() }}\n          </span>\n        </div>\n      }\n    </button>\n  `,\n  styles: `\n    .private {\n      @apply bg-gray-200 hover:bg-gray-200 border-gray-400;\n    }\n    .active {\n      @apply bg-emerald-300 hover:bg-emerald-300 border-emerald-500;\n    }\n    .active:not(.private) {\n      @apply hover:bg-emerald-200 hover:border-emerald-400;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PokerCardComponent {\n  content = input.required<string | null>();\n  size = input<'S' | 'L'>('S');\n  disabled = input<boolean>(false);\n  private = input<boolean>(false);\n  active = input<boolean>(false);\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n    .private {\n      @apply bg-gray-200 hover:bg-gray-200 border-gray-400;\n    }\n    .active {\n      @apply bg-emerald-300 hover:bg-emerald-300 border-emerald-500;\n    }\n    .active:not(.private) {\n      @apply hover:bg-emerald-200 hover:border-emerald-400;\n    }\n  \n",
      "extends": []
    },
    {
      "name": "PokerTableComponent",
      "id": "component-PokerTableComponent-3d2c73fee19f18399b731be712d650414534c0fcd10823fbaaefed28612ac5d48f9f67a608dee3fd62830c6945425492845143a9455d8151936337b3cf57cbfc",
      "file": "src/app/room/poker-table/poker-table.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-poker-table",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"flex gap-3 place-content-center\">\n  @for (item of roomStore.currentVotes() | keyvalue; track item.key) {\n    @if (item.key !== userStore.user()?.name) {\n      <div class=\"flex flex-col\">\n        <app-poker-card\n          [content]=\"item.value\"\n          size=\"S\"\n          [disabled]=\"true\"\n          [private]=\"true\"\n          [active]=\"item.value !== null\"></app-poker-card>\n        <span class=\"text-center\">{{ item.key }}</span>\n      </div>\n    }\n  }\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "roomStore",
          "defaultValue": "inject(RoomStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [148]
        },
        {
          "name": "userStore",
          "defaultValue": "inject(UserStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "KeyValuePipe",
          "type": "pipe"
        },
        {
          "name": "PokerCardComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { KeyValuePipe } from '@angular/common';\nimport { PokerCardComponent } from '../poker-card/poker-card.component';\nimport { RoomStore, UserStore } from '@poker/data-models';\n\n@Component({\n  selector: 'app-poker-table',\n  standalone: true,\n  imports: [KeyValuePipe, PokerCardComponent],\n  template: `\n    <div class=\"flex gap-3 place-content-center\">\n      @for (item of roomStore.currentVotes() | keyvalue; track item.key) {\n        @if (item.key !== userStore.user()?.name) {\n          <div class=\"flex flex-col\">\n            <app-poker-card\n              [content]=\"item.value\"\n              size=\"S\"\n              [disabled]=\"true\"\n              [private]=\"true\"\n              [active]=\"item.value !== null\"></app-poker-card>\n            <span class=\"text-center\">{{ item.key }}</span>\n          </div>\n        }\n      }\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PokerTableComponent {\n  readonly roomStore = inject(RoomStore);\n  readonly userStore = inject(UserStore);\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "RoomComponent",
      "id": "component-RoomComponent-cc01e9b5769d2fceabe3846baa289b96c42e5cd586bcb8ce8beab079e3228bfab26b1963b3172f4e64c77a79b35a4f525eb081519ca26153056a179b17bc4483",
      "file": "src/app/room/room.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "RoomStore"
        },
        {
          "name": "UserStore"
        }
      ],
      "selector": "app-room",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"p-4 h-svh flex flex-col\">\n  <div>\n    <div class=\"flex w-full justify-between\">\n      <a mat-stroked-button href=\"/lobby\">\n        <mat-icon>home</mat-icon> Back to lobby\n      </a>\n\n      <div class=\"text-center\">\n        <h1>Room {{ roomName() }}</h1>\n        <h4>Current round: {{ roomStore.currentRoom().currentRound }}</h4>\n      </div>\n\n      <div class=\"flex gap-3\">\n        <button\n          mat-mini-fab\n          color=\"primary\"\n          matTooltip=\"User info\"\n          aria-label=\"Button to open user info\"\n          (click)=\"openBottomSheet('USER')\">\n          <mat-icon>person</mat-icon>\n        </button>\n        <button\n          mat-mini-fab\n          color=\"primary\"\n          matTooltip=\"Open vote history\"\n          aria-label=\"Button to open vote history\"\n          (click)=\"openBottomSheet('HISTORY')\">\n          <mat-icon>history</mat-icon>\n        </button>\n        <button\n          mat-mini-fab\n          color=\"accent\"\n          matTooltip=\"Open sharing options\"\n          aria-label=\"Button to open sharing options\"\n          (click)=\"openBottomSheet('SHARE')\">\n          <mat-icon>ios_share</mat-icon>\n        </button>\n      </div>\n    </div>\n\n    @if (!roomStore.currentPlayers().length) {\n      <mat-card\n        tabindex=\"-1\"\n        class=\"fixed z-50 w-[calc(100%-2rem)] -translate-x-1/2 lg:max-w-7xl left-1/2 top-6\">\n        <mat-card-content class=\"bg-gray-100\">\n          <div class=\"flex flex-row justify-between items-center\">\n            <span>This room has no player yet</span>\n            <button\n              mat-flat-button\n              color=\"accent\"\n              (click)=\"openBottomSheet('SHARE')\">\n              <mat-icon>ios_share</mat-icon> Share it\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    }\n    <div class=\"relative w-min\">\n      <mat-progress-spinner\n        [color]=\"timerColor()\"\n        mode=\"determinate\"\n        [value]=\"timerValue()\">\n        test\n      </mat-progress-spinner>\n      <div\n        class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-4xl\">\n        {{ timerValue() }}\n      </div>\n    </div>\n    <app-poker-table></app-poker-table>\n  </div>\n  <div class=\"mt-auto\">\n    <app-user-deck></app-user-deck>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "bottomSheet",
          "defaultValue": "inject(MatBottomSheet)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 141,
          "modifierKind": [148]
        },
        {
          "name": "dialog",
          "defaultValue": "inject(MatDialog)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 140,
          "modifierKind": [148]
        },
        {
          "name": "roomName",
          "defaultValue": "input.required<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 137
        },
        {
          "name": "roomStore",
          "defaultValue": "inject(RoomStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 138,
          "modifierKind": [148]
        },
        {
          "name": "timerColor",
          "defaultValue": "computed(() =>\n    this.timerValue() < 30 ? 'warn' : 'primary'\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<string>",
          "optional": false,
          "description": "",
          "line": 144
        },
        {
          "name": "timerValue",
          "defaultValue": "signal(70)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<number>",
          "optional": false,
          "description": "",
          "line": 143
        },
        {
          "name": "userStore",
          "defaultValue": "inject(UserStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 139,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "openBottomSheet",
          "args": [
            {
              "name": "sheetType",
              "type": "\"USER\" | \"SHARE\" | \"HISTORY\"",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 161,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "sheetType",
              "type": "\"USER\" | \"SHARE\" | \"HISTORY\"",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "openDialog",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "JsonPipe",
          "type": "pipe"
        },
        {
          "name": "MatButton"
        },
        {
          "name": "MatAnchor"
        },
        {
          "name": "MatIcon"
        },
        {
          "name": "MatMiniFabButton"
        },
        {
          "name": "MatTooltip"
        },
        {
          "name": "MatCard"
        },
        {
          "name": "MatCardActions"
        },
        {
          "name": "MatCardContent"
        },
        {
          "name": "MatProgressSpinner"
        },
        {
          "name": "PokerCardComponent",
          "type": "component"
        },
        {
          "name": "KeyValuePipe",
          "type": "pipe"
        },
        {
          "name": "UserDeckComponent",
          "type": "component"
        },
        {
          "name": "PokerTableComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  input,\n  Signal,\n  signal,\n  WritableSignal,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserCreationDialogComponent } from '../user/user-creation-dialog/user-creation-dialog.component';\nimport { RoomStore, UserStore } from '@poker/data-models';\nimport { JsonPipe, KeyValuePipe } from '@angular/common';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFabButton,\n} from '@angular/material/button';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { UserProfileComponent } from '../user/user-profile/user-profile.component';\nimport { ShareRoomComponent } from './share-room/share-room.component';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardContent,\n} from '@angular/material/card';\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\nimport { PokerCardComponent } from './poker-card/poker-card.component';\nimport { VoteHistoryComponent } from './vote-history/vote-history.component';\nimport { UserDeckComponent } from '../user/user-deck/user-deck.component';\nimport { PokerTableComponent } from './poker-table/poker-table.component';\n\n@Component({\n  selector: 'app-room',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    JsonPipe,\n    MatButton,\n    MatAnchor,\n    MatIcon,\n    MatMiniFabButton,\n    MatTooltip,\n    MatCard,\n    MatCardActions,\n    MatCardContent,\n    MatProgressSpinner,\n    PokerCardComponent,\n    KeyValuePipe,\n    UserDeckComponent,\n    PokerTableComponent,\n  ],\n  template: `\n    <div class=\"p-4 h-svh flex flex-col\">\n      <div>\n        <div class=\"flex w-full justify-between\">\n          <a mat-stroked-button href=\"/lobby\">\n            <mat-icon>home</mat-icon> Back to lobby\n          </a>\n\n          <div class=\"text-center\">\n            <h1>Room {{ roomName() }}</h1>\n            <h4>Current round: {{ roomStore.currentRoom().currentRound }}</h4>\n          </div>\n\n          <div class=\"flex gap-3\">\n            <button\n              mat-mini-fab\n              color=\"primary\"\n              matTooltip=\"User info\"\n              aria-label=\"Button to open user info\"\n              (click)=\"openBottomSheet('USER')\">\n              <mat-icon>person</mat-icon>\n            </button>\n            <button\n              mat-mini-fab\n              color=\"primary\"\n              matTooltip=\"Open vote history\"\n              aria-label=\"Button to open vote history\"\n              (click)=\"openBottomSheet('HISTORY')\">\n              <mat-icon>history</mat-icon>\n            </button>\n            <button\n              mat-mini-fab\n              color=\"accent\"\n              matTooltip=\"Open sharing options\"\n              aria-label=\"Button to open sharing options\"\n              (click)=\"openBottomSheet('SHARE')\">\n              <mat-icon>ios_share</mat-icon>\n            </button>\n          </div>\n        </div>\n\n        @if (!roomStore.currentPlayers().length) {\n          <mat-card\n            tabindex=\"-1\"\n            class=\"fixed z-50 w-[calc(100%-2rem)] -translate-x-1/2 lg:max-w-7xl left-1/2 top-6\">\n            <mat-card-content class=\"bg-gray-100\">\n              <div class=\"flex flex-row justify-between items-center\">\n                <span>This room has no player yet</span>\n                <button\n                  mat-flat-button\n                  color=\"accent\"\n                  (click)=\"openBottomSheet('SHARE')\">\n                  <mat-icon>ios_share</mat-icon> Share it\n                </button>\n              </div>\n            </mat-card-content>\n          </mat-card>\n        }\n        <div class=\"relative w-min\">\n          <mat-progress-spinner\n            [color]=\"timerColor()\"\n            mode=\"determinate\"\n            [value]=\"timerValue()\">\n            test\n          </mat-progress-spinner>\n          <div\n            class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-4xl\">\n            {{ timerValue() }}\n          </div>\n        </div>\n        <app-poker-table></app-poker-table>\n      </div>\n      <div class=\"mt-auto\">\n        <app-user-deck></app-user-deck>\n      </div>\n    </div>\n  `,\n  styles: ``,\n  providers: [RoomStore, UserStore],\n})\nexport class RoomComponent {\n  roomName = input.required<string>();\n  readonly roomStore = inject(RoomStore);\n  readonly userStore = inject(UserStore);\n  readonly dialog = inject(MatDialog);\n  readonly bottomSheet = inject(MatBottomSheet);\n\n  timerValue: WritableSignal<number> = signal(70);\n  timerColor: Signal<string> = computed(() =>\n    this.timerValue() < 30 ? 'warn' : 'primary'\n  );\n\n  constructor() {\n    this.roomStore.getOne(this.roomName);\n    this.openDialog();\n  }\n\n  openDialog(): void {\n    this.dialog.open(UserCreationDialogComponent, {\n      disableClose: true,\n      data: { roomStore: this.roomStore, userStore: this.userStore },\n      maxHeight: '80vh',\n    });\n  }\n\n  openBottomSheet(sheetType: 'USER' | 'SHARE' | 'HISTORY') {\n    const panelClass = ['h-4/5'];\n    if (sheetType == 'USER') {\n      this.bottomSheet.open(UserProfileComponent, {\n        data: this.userStore,\n        panelClass,\n      });\n      return;\n    }\n    if (sheetType == 'SHARE') {\n      this.bottomSheet.open(ShareRoomComponent, {\n        data: this.roomName,\n        panelClass,\n      });\n      return;\n    }\n    if (sheetType == 'HISTORY') {\n      this.bottomSheet.open(VoteHistoryComponent, {\n        data: this.roomStore,\n        panelClass,\n      });\n      return;\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 146
      },
      "extends": []
    },
    {
      "name": "RoomListDialogComponent",
      "id": "component-RoomListDialogComponent-f5fc3c1b69eeed92560efb025aef095d65294dd20b491b1c10f611450dca12f58a432a9426ead06865dd0f23d48f5c2309e2302a67acdd8b0a52af1cc926a7dc",
      "file": "src/app/lobby/room-list-dialog/room-list-dialog.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-room-list-dialog",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"min-w-96 w-full p-3\">\n  <h2>Create a room</h2>\n  <form\n    [formGroup]=\"newRoomForm()\"\n    class=\"flex flex-row gap-4\"\n    (ngSubmit)=\"createRoom()\">\n    <mat-form-field>\n      <input\n        type=\"text\"\n        formControlName=\"name\"\n        matInput\n        placeholder=\"Enter the name of the room\"\n        required />\n\n      @if (name && name.invalid && (name.dirty || name.touched)) {\n        @if (name.errors?.['required']) {\n          <mat-error> You must enter a value. </mat-error>\n        }\n        @if (name.errors?.['pattern']) {\n          <mat-error>\n            You must only use unaccented letter, number, underscore or dash\n            characters.\n          </mat-error>\n        }\n        @if (name.errors?.['forbiddenValue']) {\n          <mat-error>\n            Name cannot be an existing room.\n            <a class=\"underline\" href=\"/room/{{ name.value }}\">Join it</a>\n            instead?\n          </mat-error>\n        }\n      }\n    </mat-form-field>\n    <button\n      mat-flat-button\n      color=\"accent\"\n      type=\"submit\"\n      [disabled]=\"!newRoomForm().valid\">\n      Create\n    </button>\n  </form>\n\n  <p>or</p>\n  <h2>Join an active room</h2>\n  <mat-nav-list>\n    @for (roomName of dialogData.availableRooms(); track roomName) {\n      <a mat-list-item href=\"/room/{{ roomName }}\">{{ roomName }}</a>\n    }\n  </mat-nav-list>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dialogData",
          "defaultValue": "inject(MAT_DIALOG_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RoomStore",
          "optional": false,
          "description": "",
          "line": 90,
          "modifierKind": [148]
        },
        {
          "name": "dialogRef",
          "defaultValue": "inject(MatDialogRef<RoomListDialogComponent>)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 91,
          "modifierKind": [148]
        },
        {
          "name": "newRoomForm",
          "defaultValue": "computed(() => {\n    return new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n        Validators.pattern(/^[-\\w]+$/),\n        forbiddenValuesValidator(this.dialogData.availableRooms()),\n      ]),\n    });\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 94
        },
        {
          "name": "router",
          "defaultValue": "inject(Router)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 92,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "createRoom",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 108,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "MatInput"
        },
        {
          "name": "MatButton"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        },
        {
          "name": "MatListModule",
          "type": "module"
        },
        {
          "name": "MatError"
        },
        {
          "name": "MatFormField"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n} from '@angular/core';\nimport { RoomStore } from '@poker/data-models';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { MatError, MatFormField, MatInput } from '@angular/material/input';\nimport { forbiddenValuesValidator } from '@poker/utils';\nimport { MatButton } from '@angular/material/button';\nimport { JsonPipe } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-room-list-dialog',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    MatInput,\n    MatButton,\n    JsonPipe,\n    MatListModule,\n    MatError,\n    MatFormField,\n  ],\n  template: `\n    <div class=\"min-w-96 w-full p-3\">\n      <h2>Create a room</h2>\n      <form\n        [formGroup]=\"newRoomForm()\"\n        class=\"flex flex-row gap-4\"\n        (ngSubmit)=\"createRoom()\">\n        <mat-form-field>\n          <input\n            type=\"text\"\n            formControlName=\"name\"\n            matInput\n            placeholder=\"Enter the name of the room\"\n            required />\n\n          @if (name && name.invalid && (name.dirty || name.touched)) {\n            @if (name.errors?.['required']) {\n              <mat-error> You must enter a value. </mat-error>\n            }\n            @if (name.errors?.['pattern']) {\n              <mat-error>\n                You must only use unaccented letter, number, underscore or dash\n                characters.\n              </mat-error>\n            }\n            @if (name.errors?.['forbiddenValue']) {\n              <mat-error>\n                Name cannot be an existing room.\n                <a class=\"underline\" href=\"/room/{{ name.value }}\">Join it</a>\n                instead?\n              </mat-error>\n            }\n          }\n        </mat-form-field>\n        <button\n          mat-flat-button\n          color=\"accent\"\n          type=\"submit\"\n          [disabled]=\"!newRoomForm().valid\">\n          Create\n        </button>\n      </form>\n\n      <p>or</p>\n      <h2>Join an active room</h2>\n      <mat-nav-list>\n        @for (roomName of dialogData.availableRooms(); track roomName) {\n          <a mat-list-item href=\"/room/{{ roomName }}\">{{ roomName }}</a>\n        }\n      </mat-nav-list>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoomListDialogComponent {\n  readonly dialogData: RoomStore = inject(MAT_DIALOG_DATA);\n  readonly dialogRef = inject(MatDialogRef<RoomListDialogComponent>);\n  readonly router = inject(Router);\n\n  newRoomForm = computed(() => {\n    return new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n        Validators.pattern(/^[-\\w]+$/),\n        forbiddenValuesValidator(this.dialogData.availableRooms()),\n      ]),\n    });\n  });\n\n  get name() {\n    return this.newRoomForm().get('name');\n  }\n\n  async createRoom() {\n    if (this.name?.value) {\n      await this.router.navigate(['room', this.name.value]);\n      this.dialogRef.close();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": [],
      "accessors": {
        "name": {
          "name": "name",
          "getSignature": {
            "name": "name",
            "type": "",
            "returnType": "",
            "line": 104
          }
        }
      }
    },
    {
      "name": "ShareRoomComponent",
      "id": "component-ShareRoomComponent-e5cebfe8c2dc62d36d239e51bca6b55c5a32e175f0b5af336cec6d47b35d80a0d4bb130bf324c32f7160c6a455ea1dee91c44df5dc31ea173b4981fd3d922e4e",
      "file": "src/app/room/share-room/share-room.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-share-room",
      "styleUrls": [],
      "styles": [""],
      "template": "<div>\n  <h1>Give access to room {{ sheetData() }} to your coworkers</h1>\n  <p>Share the link</p>\n  <mat-form-field class=\"w-full\">\n    <span matTextPrefix>URL &nbsp;</span>\n    <input\n      matInput\n      type=\"text\"\n      value=\"{{ document.location.href }}\"\n      readonly\n      disabled />\n    <button\n      matSuffix\n      mat-icon-button\n      aria-label=\"Copy link\"\n      matTooltip=\"Copy link\"\n      color=\"primary\"\n      (click)=\"changeCopyIcon()\"\n      [cdkCopyToClipboard]=\"document.location.href\">\n      <mat-icon>{{ copyIcon() }}</mat-icon>\n    </button>\n  </mat-form-field>\n  <p>or Share the QRCode</p>\n  <qrcode\n    class=\"flex justify-center\"\n    [width]=\"300\"\n    [qrdata]=\"document.location.href\"\n    [errorCorrectionLevel]=\"'L'\"></qrcode>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "copyIcon",
          "defaultValue": "signal('content_copy')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 75,
          "modifierKind": [148]
        },
        {
          "name": "document",
          "defaultValue": "inject(DOCUMENT)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [148]
        },
        {
          "name": "location",
          "defaultValue": "location",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 85,
          "modifierKind": [124, 148]
        },
        {
          "name": "sheetData",
          "defaultValue": "inject(MAT_BOTTOM_SHEET_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<string>",
          "optional": false,
          "description": "",
          "line": 74,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "changeCopyIcon",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatTooltip"
        },
        {
          "name": "MatIcon"
        },
        {
          "name": "CdkCopyToClipboard"
        },
        {
          "name": "MatLabel"
        },
        {
          "name": "MatFormField"
        },
        {
          "name": "MatIconButton"
        },
        {
          "name": "MatPrefix"
        },
        {
          "name": "MatSuffix"
        },
        {
          "name": "MatInput"
        },
        {
          "name": "QRCodeModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  signal,\n  Signal,\n  WritableSignal,\n} from '@angular/core';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIcon } from '@angular/material/icon';\nimport { DOCUMENT } from '@angular/common';\nimport { CdkCopyToClipboard } from '@angular/cdk/clipboard';\nimport {\n  MatFormField,\n  MatLabel,\n  MatPrefix,\n  MatSuffix,\n} from '@angular/material/form-field';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatInput } from '@angular/material/input';\nimport { QRCodeModule } from 'angularx-qrcode';\n\n@Component({\n  selector: 'app-share-room',\n  standalone: true,\n  imports: [\n    MatTooltip,\n    MatIcon,\n    CdkCopyToClipboard,\n    MatLabel,\n    MatFormField,\n    MatIconButton,\n    MatPrefix,\n    MatSuffix,\n    MatInput,\n    QRCodeModule,\n  ],\n  template: `\n    <div>\n      <h1>Give access to room {{ sheetData() }} to your coworkers</h1>\n      <p>Share the link</p>\n      <mat-form-field class=\"w-full\">\n        <span matTextPrefix>URL &nbsp;</span>\n        <input\n          matInput\n          type=\"text\"\n          value=\"{{ document.location.href }}\"\n          readonly\n          disabled />\n        <button\n          matSuffix\n          mat-icon-button\n          aria-label=\"Copy link\"\n          matTooltip=\"Copy link\"\n          color=\"primary\"\n          (click)=\"changeCopyIcon()\"\n          [cdkCopyToClipboard]=\"document.location.href\">\n          <mat-icon>{{ copyIcon() }}</mat-icon>\n        </button>\n      </mat-form-field>\n      <p>or Share the QRCode</p>\n      <qrcode\n        class=\"flex justify-center\"\n        [width]=\"300\"\n        [qrdata]=\"document.location.href\"\n        [errorCorrectionLevel]=\"'L'\"></qrcode>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShareRoomComponent {\n  readonly sheetData: Signal<string> = inject(MAT_BOTTOM_SHEET_DATA);\n  readonly copyIcon: WritableSignal<string> = signal('content_copy');\n  readonly document = inject(DOCUMENT);\n\n  changeCopyIcon() {\n    this.copyIcon.set('done');\n    setTimeout(() => {\n      this.copyIcon.set('content_copy');\n    }, 1000);\n  }\n\n  protected readonly location = location;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "UserCreationDialogComponent",
      "id": "component-UserCreationDialogComponent-e53e7e800786b2a698646ff9dc3dd3373552ad18e237bf99911784aab05e7792ab02cad92df6bb1a3a2b29c6c30263afdc5630437fb60214dbe93e15e0d622ea",
      "file": "src/app/user/user-creation-dialog/user-creation-dialog.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-user-creation-dialog",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"min-w-96 w-full p-3\">\n  <h2>Welcome</h2>\n  <form\n    [formGroup]=\"newUserForm()\"\n    class=\"flex flex-col gap-2\"\n    (ngSubmit)=\"joinRoom()\">\n    <mat-form-field>\n      <input\n        type=\"text\"\n        formControlName=\"name\"\n        matInput\n        placeholder=\"Enter your name\"\n        required />\n\n      @if (name && name.invalid && (name.dirty || name.touched)) {\n        @if (name.errors?.['required']) {\n          <mat-error> You must enter a value. </mat-error>\n        }\n        @if (name.errors?.['pattern']) {\n          <mat-error>\n            You must only use unaccented letter, number, underscore or dash\n            characters.\n          </mat-error>\n        }\n      }\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Your role</mat-label>\n      <mat-select formControlName=\"role\" required>\n        @for (role of UserRoleEnumChoices; track role) {\n          <mat-option [value]=\"role\">{{ UserRoleEnum[role] }}</mat-option>\n        }\n      </mat-select>\n    </mat-form-field>\n    @if (newUserForm().errors?.['forbiddenValue']) {\n      <mat-error>\n        There is already a Player with that name, change your role if that's\n        you, else change your name\n      </mat-error>\n    }\n\n    <button\n      mat-flat-button\n      color=\"accent\"\n      type=\"submit\"\n      [disabled]=\"!newUserForm().valid\">\n      Join\n    </button>\n  </form>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dialogData",
          "defaultValue": "inject(MAT_DIALOG_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [148]
        },
        {
          "name": "dialogRef",
          "defaultValue": "inject(MatDialogRef<UserCreationDialogComponent>)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [148]
        },
        {
          "name": "newUserForm",
          "defaultValue": "computed(() => {\n    return new FormGroup(\n      {\n        name: new FormControl(this.dialogData.userStore.user()?.name || '', [\n          Validators.required,\n          Validators.pattern(/^[-\\w]+$/),\n        ]),\n        role: new FormControl(\n          this.dialogData.userStore.user()?.role || UserRoleEnum.Player,\n          [Validators.required]\n        ),\n      },\n      {\n        validators: [\n          this.observerWithPlayerName(\n            this.dialogData.roomStore.currentPlayers()\n          ),\n        ],\n      }\n    );\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 105
        },
        {
          "name": "UserRoleEnum",
          "defaultValue": "UserRoleEnum",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 168,
          "modifierKind": [124, 148]
        },
        {
          "name": "UserRoleEnumChoices",
          "defaultValue": "UserRoleEnumChoices",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 169,
          "modifierKind": [124, 148]
        }
      ],
      "methodsClass": [
        {
          "name": "joinRoom",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 150,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "observerWithPlayerName",
          "args": [
            {
              "name": "forbiddenValues",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ValidatorFn",
          "typeParameters": [],
          "line": 135,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "forbiddenValues",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatButton"
        },
        {
          "name": "MatError"
        },
        {
          "name": "MatFormField"
        },
        {
          "name": "MatInput"
        },
        {
          "name": "MatLabel"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "MatSelect"
        },
        {
          "name": "MatOption"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n} from '@angular/core';\nimport {\n  RoomStore,\n  UserRoleEnum,\n  UserRoleEnumChoices,\n  UserStore,\n} from '@poker/data-models';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatError, MatFormField, MatLabel } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { MatOption, MatSelect } from '@angular/material/select';\nimport { forbiddenValuesValidator } from '@poker/utils';\nimport { JsonPipe } from '@angular/common';\n\n@Component({\n  selector: 'app-user-creation-dialog',\n  standalone: true,\n  imports: [\n    MatButton,\n    MatError,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    ReactiveFormsModule,\n    MatSelect,\n    MatOption,\n    JsonPipe,\n  ],\n  template: `\n    <div class=\"min-w-96 w-full p-3\">\n      <h2>Welcome</h2>\n      <form\n        [formGroup]=\"newUserForm()\"\n        class=\"flex flex-col gap-2\"\n        (ngSubmit)=\"joinRoom()\">\n        <mat-form-field>\n          <input\n            type=\"text\"\n            formControlName=\"name\"\n            matInput\n            placeholder=\"Enter your name\"\n            required />\n\n          @if (name && name.invalid && (name.dirty || name.touched)) {\n            @if (name.errors?.['required']) {\n              <mat-error> You must enter a value. </mat-error>\n            }\n            @if (name.errors?.['pattern']) {\n              <mat-error>\n                You must only use unaccented letter, number, underscore or dash\n                characters.\n              </mat-error>\n            }\n          }\n        </mat-form-field>\n\n        <mat-form-field>\n          <mat-label>Your role</mat-label>\n          <mat-select formControlName=\"role\" required>\n            @for (role of UserRoleEnumChoices; track role) {\n              <mat-option [value]=\"role\">{{ UserRoleEnum[role] }}</mat-option>\n            }\n          </mat-select>\n        </mat-form-field>\n        @if (newUserForm().errors?.['forbiddenValue']) {\n          <mat-error>\n            There is already a Player with that name, change your role if that's\n            you, else change your name\n          </mat-error>\n        }\n\n        <button\n          mat-flat-button\n          color=\"accent\"\n          type=\"submit\"\n          [disabled]=\"!newUserForm().valid\">\n          Join\n        </button>\n      </form>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserCreationDialogComponent {\n  readonly dialogData: { roomStore: RoomStore; userStore: UserStore } =\n    inject(MAT_DIALOG_DATA);\n  readonly dialogRef = inject(MatDialogRef<UserCreationDialogComponent>);\n\n  newUserForm = computed(() => {\n    return new FormGroup(\n      {\n        name: new FormControl(this.dialogData.userStore.user()?.name || '', [\n          Validators.required,\n          Validators.pattern(/^[-\\w]+$/),\n        ]),\n        role: new FormControl(\n          this.dialogData.userStore.user()?.role || UserRoleEnum.Player,\n          [Validators.required]\n        ),\n      },\n      {\n        validators: [\n          this.observerWithPlayerName(\n            this.dialogData.roomStore.currentPlayers()\n          ),\n        ],\n      }\n    );\n  });\n\n  get name() {\n    return this.newUserForm().get('name');\n  }\n\n  get role() {\n    return this.newUserForm().get('role');\n  }\n\n  observerWithPlayerName(forbiddenValues: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const name = control.get('name');\n      const role = control.get('role');\n\n      return (\n        (role &&\n          name &&\n          role.value === UserRoleEnum.Observer &&\n          forbiddenValuesValidator(forbiddenValues)(name)) ||\n        null\n      );\n    };\n  }\n\n  joinRoom(): void {\n    if (this.name?.value && this.role?.value != null) {\n      this.dialogData.userStore.setUser({\n        name: this.name.value,\n        role: this.role.value,\n      });\n      if ((this.role.value as UserRoleEnum) == UserRoleEnum.Player) {\n        this.dialogData.roomStore.addPlayerToRoom(\n          this.dialogData.roomStore.currentRoom().name,\n          this.name.value,\n          () => this.dialogRef.close()\n        );\n      } else {\n        this.dialogRef.close();\n      }\n    }\n  }\n\n  protected readonly UserRoleEnum = UserRoleEnum;\n  protected readonly UserRoleEnumChoices = UserRoleEnumChoices;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": [],
      "accessors": {
        "name": {
          "name": "name",
          "getSignature": {
            "name": "name",
            "type": "",
            "returnType": "",
            "line": 127
          }
        },
        "role": {
          "name": "role",
          "getSignature": {
            "name": "role",
            "type": "",
            "returnType": "",
            "line": 131
          }
        }
      }
    },
    {
      "name": "UserDeckComponent",
      "id": "component-UserDeckComponent-9ceda5915c95e7f64f343394c2b7d9d6836dcadba1d2450ad048cd8969f31ded19045b7bcc69c7aacaf28faf514e18741de949117f988425cd61127faa461e65",
      "file": "src/app/user/user-deck/user-deck.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-user-deck",
      "styleUrls": [],
      "styles": [""],
      "template": "<h3 class=\"text-center font-bold !mb-0\">{{ userStore.user()?.name }}</h3>\n@if (userStore.user()?.role === UserRoleEnum.Observer) {\n  <div>\n    <h4 class=\"text-center font-bold\">\n      You are in\n      <mat-icon class=\"align-middle\">visibility</mat-icon> observer mode\n    </h4>\n    <p class=\"text-center caption font-thin\">\n      Reload page to change your role\n    </p>\n  </div>\n} @else if (userStore.user()?.role === UserRoleEnum.Player) {\n  <div class=\"flex gap-1 place-content-center\">\n    @for (voteOption of voteChoices; track voteOption) {\n      <app-poker-card\n        [content]=\"voteOption\"\n        size=\"L\"\n        class=\"hover:pb-2 pt-2 hover:pt-0\"\n        [class.pb-2]=\"voteOption === userVote()\"\n        [class.pt-0]=\"voteOption === userVote()\"\n        [active]=\"voteOption === userVote()\"\n        (click)=\"vote(voteOption)\"></app-poker-card>\n    }\n  </div>\n}\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "roomStore",
          "defaultValue": "inject(RoomStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [148]
        },
        {
          "name": "UserRoleEnum",
          "defaultValue": "UserRoleEnum",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [124, 148]
        },
        {
          "name": "userStore",
          "defaultValue": "inject(UserStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [148]
        },
        {
          "name": "userVote",
          "defaultValue": "computed(() => {\n    const user = this.userStore.user();\n    if (user !== null) {\n      return this.roomStore.currentVotes()[user.name];\n    }\n    return null;\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<VoteChoice | null>",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [148]
        },
        {
          "name": "voteChoices",
          "defaultValue": "voteChoices",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [124, 148]
        }
      ],
      "methodsClass": [
        {
          "name": "vote",
          "args": [
            {
              "name": "voteOption",
              "type": "VoteChoice",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "voteOption",
              "type": "VoteChoice",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatIcon"
        },
        {
          "name": "PokerCardComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  Signal,\n} from '@angular/core';\nimport {\n  RoomStore,\n  UserRoleEnum,\n  UserStore,\n  VoteChoice,\n  voteChoices,\n} from '@poker/data-models';\nimport { MatIcon } from '@angular/material/icon';\nimport { PokerCardComponent } from '../../room/poker-card/poker-card.component';\n\n@Component({\n  selector: 'app-user-deck',\n  standalone: true,\n  imports: [MatIcon, PokerCardComponent],\n  template: `\n    <h3 class=\"text-center font-bold !mb-0\">{{ userStore.user()?.name }}</h3>\n    @if (userStore.user()?.role === UserRoleEnum.Observer) {\n      <div>\n        <h4 class=\"text-center font-bold\">\n          You are in\n          <mat-icon class=\"align-middle\">visibility</mat-icon> observer mode\n        </h4>\n        <p class=\"text-center caption font-thin\">\n          Reload page to change your role\n        </p>\n      </div>\n    } @else if (userStore.user()?.role === UserRoleEnum.Player) {\n      <div class=\"flex gap-1 place-content-center\">\n        @for (voteOption of voteChoices; track voteOption) {\n          <app-poker-card\n            [content]=\"voteOption\"\n            size=\"L\"\n            class=\"hover:pb-2 pt-2 hover:pt-0\"\n            [class.pb-2]=\"voteOption === userVote()\"\n            [class.pt-0]=\"voteOption === userVote()\"\n            [active]=\"voteOption === userVote()\"\n            (click)=\"vote(voteOption)\"></app-poker-card>\n        }\n      </div>\n    }\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserDeckComponent {\n  readonly roomStore = inject(RoomStore);\n  readonly userStore = inject(UserStore);\n  protected readonly UserRoleEnum = UserRoleEnum;\n  protected readonly voteChoices = voteChoices;\n\n  readonly userVote: Signal<VoteChoice | null> = computed(() => {\n    const user = this.userStore.user();\n    if (user !== null) {\n      return this.roomStore.currentVotes()[user.name];\n    }\n    return null;\n  });\n\n  vote(voteOption: VoteChoice) {\n    this.roomStore.vote(\n      this.roomStore.currentRoom(),\n      this.userStore.user(),\n      voteOption\n    );\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "UserProfileComponent",
      "id": "component-UserProfileComponent-f20d2d13767491b752d72c2dc26aa961ea96bfcfb03211686ca7d8aaffc942fe4f8c940bd94ec1f6dc30260c293174bae5873cb692bdee41d4f3b50a7526aecc",
      "file": "src/app/user/user-profile/user-profile.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-user-profile",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"text-center flex flex-col place-content-center h-full\">\n  <h2>\n    You are user <strong>{{ sheetData.user()?.name }}</strong>\n  </h2>\n  <h2>\n    You have the role\n    <strong>\n      <mat-icon class=\"align-middle\">{{ roleIcon }}</mat-icon>\n      {{ sheetData.userDisplayRole() }}</strong\n    >\n  </h2>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "roleIcon",
          "defaultValue": "this.sheetData.user()?.role == UserRoleEnum.Observer\n      ? 'visibility'\n      : 'videogame_asset'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [148]
        },
        {
          "name": "sheetData",
          "defaultValue": "inject(MAT_BOTTOM_SHEET_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "UserStore",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [148]
        },
        {
          "name": "UserRoleEnum",
          "defaultValue": "UserRoleEnum",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [124, 148]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatIcon"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { UserRoleEnum, UserStore } from '@poker/data-models';\nimport { MatIcon } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-user-profile',\n  standalone: true,\n  template: `\n    <div class=\"text-center flex flex-col place-content-center h-full\">\n      <h2>\n        You are user <strong>{{ sheetData.user()?.name }}</strong>\n      </h2>\n      <h2>\n        You have the role\n        <strong>\n          <mat-icon class=\"align-middle\">{{ roleIcon }}</mat-icon>\n          {{ sheetData.userDisplayRole() }}</strong\n        >\n      </h2>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [MatIcon],\n})\nexport class UserProfileComponent {\n  readonly sheetData: UserStore = inject(MAT_BOTTOM_SHEET_DATA);\n  readonly roleIcon =\n    this.sheetData.user()?.role == UserRoleEnum.Observer\n      ? 'visibility'\n      : 'videogame_asset';\n  protected readonly UserRoleEnum = UserRoleEnum;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "VoteHistoryComponent",
      "id": "component-VoteHistoryComponent-ed2b50bab009965b3be9b38ec6670d3ef38bffcf8f3585c27c827e5fb6ab753a0b4c80bf38ce2ab229585beba318d7b3828f15aae7ff0f13450f252eb612b595",
      "file": "src/app/room/vote-history/vote-history.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-vote-history",
      "styleUrls": [],
      "styles": [""],
      "template": "<div>\n  <h1>History of the votes</h1>\n  <mat-list>\n    @for (\n      roundItem of sheetData.historyVotes() | keyvalue;\n      track roundItem.key\n    ) {\n      <mat-list-item>\n        <span matListItemTitle>Round {{ roundItem.key }}</span>\n        @for (voteItem of roundItem.value | keyvalue; track voteItem.key) {\n          <span matListItemLine\n            >{{ voteItem.key }}: {{ voteItem.value }}</span\n          >\n        }\n      </mat-list-item>\n    }\n  </mat-list>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "sheetData",
          "defaultValue": "inject(MAT_BOTTOM_SHEET_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RoomStore",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatListModule",
          "type": "module"
        },
        {
          "name": "KeyValuePipe",
          "type": "pipe"
        },
        {
          "name": "PokerCardComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { RoomStore } from '@poker/data-models';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { MatListModule } from '@angular/material/list';\nimport { KeyValuePipe } from '@angular/common';\nimport { PokerCardComponent } from '../poker-card/poker-card.component';\n\n@Component({\n  selector: 'app-vote-history',\n  standalone: true,\n  imports: [MatListModule, KeyValuePipe, PokerCardComponent],\n  template: `\n    <div>\n      <h1>History of the votes</h1>\n      <mat-list>\n        @for (\n          roundItem of sheetData.historyVotes() | keyvalue;\n          track roundItem.key\n        ) {\n          <mat-list-item>\n            <span matListItemTitle>Round {{ roundItem.key }}</span>\n            @for (voteItem of roundItem.value | keyvalue; track voteItem.key) {\n              <span matListItemLine\n                >{{ voteItem.key }}: {{ voteItem.value }}</span\n              >\n            }\n          </mat-list-item>\n        }\n      </mat-list>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VoteHistoryComponent {\n  readonly sheetData: RoomStore = inject(MAT_BOTTOM_SHEET_DATA);\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "appConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ApplicationConfig",
        "defaultValue": "{\n  providers: [\n    provideRouter(routes, withComponentInputBinding()),\n    { provide: TitleStrategy, useClass: TemplatePageTitleStrategy },\n    provideAnimationsAsync(),\n    importProvidersFrom(MqttModule.forRoot(environment.mqttConfigOptions)),\n  ],\n}"
      },
      {
        "name": "connection",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ConnectResponse | undefined"
      },
      {
        "name": "currentActionNames",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new Set<string>()"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/poker-card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    // @ts-ignore\n    content: signal('Test'),\n    // @ts-ignore\n    size: 'S',\n    // @ts-ignore\n    disabled: false,\n    // @ts-ignore\n    private: false,\n    // @ts-ignore\n    active: false,\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.production.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "EnvironmentConfig",
        "defaultValue": "{\n  appVersion: '#RELEASE_VERSION',\n  production: false,\n  env: 'production',\n\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: '#MQTT_HOST',\n    username: '#MQTT_USER',\n    password: '#MQTT_PWD',\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.staging.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "EnvironmentConfig",
        "defaultValue": "{\n  appVersion: '#RELEASE_VERSION',\n  production: true,\n  env: 'staging',\n\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: '#MQTT_HOST',\n    username: '#MQTT_USER',\n    password: '#MQTT_PWD',\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "EnvironmentConfig",
        "defaultValue": "{\n  appVersion: 'dev',\n  production: false,\n  env: 'dev',\n\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: 'localhost',\n    username: 'user',\n    password: 'password',\n  },\n}"
      },
      {
        "name": "ENVIRONMENT_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment-type.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken('ENVIRONMENT_CONFIG')"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/room/room.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "RoomState",
        "defaultValue": "{\n  currentRoom: roomDefault,\n  availableRooms: [],\n}"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/user/user.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "UserState",
        "defaultValue": "{\n  user: null,\n}"
      },
      {
        "name": "Large",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{}"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<ButtonComponent>",
        "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<HeaderComponent>",
        "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<PageComponent>",
        "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/poker-card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<PokerCardComponent>",
        "defaultValue": "{\n  title: 'Example/Button',\n  component: PokerCardComponent,\n  tags: ['autodocs'],\n}"
      },
      {
        "name": "mqttDefaults",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment-type.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "IMqttServiceOptions",
        "defaultValue": "{\n  port: 8080,\n  path: '/mqtt',\n  protocolVersion: 5,\n}"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": ".storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
      },
      {
        "name": "resolvedRoomTitle",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.routes.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ResolveFn<string>",
        "defaultValue": "(route: ActivatedRouteSnapshot) =>\n  `Room ${route.paramMap.get('roomName')}`"
      },
      {
        "name": "roomDefault",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/room/room.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "{\n  currentRound: 0,\n  votePerRoundPerPlayer: { 0: {} },\n  name: '',\n} as RoomModel"
      },
      {
        "name": "RoomStore",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/room/room.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "signalStore(\n  withDevtools('rooms'),\n  withState<RoomState>(initialState),\n  withComputed(({ currentRoom }) => ({\n    currentVotes: computed(\n      () => currentRoom.votePerRoundPerPlayer()[currentRoom.currentRound()]\n    ),\n    historyVotes: computed(() => {\n      return Object.fromEntries(\n        Object.entries(currentRoom.votePerRoundPerPlayer()).filter(\n          ([round]) => Number(round) != currentRoom.currentRound()\n        )\n      );\n    }),\n    currentPlayers: computed(() =>\n      Object.keys(\n        currentRoom.votePerRoundPerPlayer()[currentRoom.currentRound()]\n      )\n    ),\n  })),\n  withMethods((store, roomService = inject(RoomService)) => {\n    function getCurrentRound(name: string) {\n      console.debug('getCurrentRound', name);\n      return roomService.getCurrentRound(name).pipe(\n        tapResponse({\n          next: (currentRound: number) => {\n            console.debug('service getCurrentRound', name, currentRound);\n            patchState(store, state => {\n              if (state.currentRoom.currentRound !== currentRound) {\n                const currentPlayers = Object.keys(\n                  state.currentRoom.votePerRoundPerPlayer[\n                    state.currentRoom.currentRound\n                  ]\n                );\n                // update round, clone player\n                return {\n                  currentRoom: {\n                    ...state.currentRoom,\n                    currentRound,\n                    votePerRoundPerPlayer: {\n                      ...state.currentRoom.votePerRoundPerPlayer,\n                      [currentRound]: Object.fromEntries(\n                        currentPlayers.map(player => [player, null])\n                      ),\n                    },\n                  } as RoomModel,\n                };\n              } else {\n                return {};\n              }\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    function getPlayers(name: string) {\n      console.debug('getPlayers', name);\n      return roomService.getPlayers(name).pipe(\n        tapResponse({\n          next: ({ player, isDeleted }) => {\n            console.debug('service getPlayers', name, player, isDeleted);\n            patchState(store, state => {\n              if (isDeleted) {\n                const { [player]: removedKey, ...roundVoteWithoutPlayer } =\n                  state.currentRoom.votePerRoundPerPlayer[\n                    state.currentRoom.currentRound\n                  ];\n                return {\n                  currentRoom: {\n                    ...state.currentRoom,\n                    votePerRoundPerPlayer: {\n                      ...state.currentRoom.votePerRoundPerPlayer,\n                      [state.currentRoom.currentRound]: roundVoteWithoutPlayer,\n                    },\n                  } as RoomModel,\n                };\n              }\n              return {\n                currentRoom: {\n                  ...state.currentRoom,\n                  votePerRoundPerPlayer: {\n                    ...state.currentRoom.votePerRoundPerPlayer,\n                    [state.currentRoom.currentRound]: {\n                      ...state.currentRoom.votePerRoundPerPlayer[\n                        state.currentRoom.currentRound\n                      ],\n                      [player]: null,\n                    },\n                  },\n                },\n              };\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    function getVotes(name: string) {\n      console.debug('getVotes', name);\n      return roomService.getVotes(name).pipe(\n        tapResponse({\n          next: ({ roundNumber, player, voteOption }) => {\n            console.debug(\n              'service getVotes',\n              name,\n              roundNumber,\n              player,\n              voteOption\n            );\n            patchState(store, state => ({\n              currentRoom: {\n                ...state.currentRoom,\n                votePerRoundPerPlayer: {\n                  ...state.currentRoom.votePerRoundPerPlayer,\n                  [roundNumber]: {\n                    ...state.currentRoom.votePerRoundPerPlayer[roundNumber],\n                    [player]: voteOption,\n                  },\n                },\n              } as RoomModel,\n            }));\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    return {\n      listAll: rxMethod<void>(\n        exhaustMap(() => {\n          console.debug('listAll');\n          return roomService.listAll().pipe(\n            tapResponse({\n              next: (availableRoom: string) =>\n                patchState(store, state => ({\n                  availableRooms: [...state.availableRooms, availableRoom],\n                })),\n              error: console.error,\n            })\n          );\n        })\n      ),\n\n      addPlayerToRoom(\n        roomName: string,\n        playerName: string,\n        onComplete: (() => void) | undefined = undefined\n      ): void {\n        console.debug('addPlayerToRoom', roomName, playerName);\n        roomService.addPlayerToRoom(roomName, playerName, onComplete);\n      },\n\n      vote(\n        currentRoom: RoomModel,\n        user: UserModel | null,\n        voteOption: VoteChoice\n      ): void {\n        console.debug('vote', currentRoom, user, voteOption);\n        return roomService.vote(\n          currentRoom.name,\n          currentRoom.currentRound,\n          user,\n          voteOption\n        );\n      },\n\n      getOne: rxMethod<string>(\n        exhaustMap((name: string) => {\n          console.debug('getOne', name);\n          patchState(store, state => ({\n            currentRoom: {\n              ...state.currentRoom,\n              name,\n            } as RoomModel,\n          }));\n          return merge(getPlayers(name), getCurrentRound(name), getVotes(name));\n        })\n      ),\n    };\n  })\n)"
      },
      {
        "name": "Secondary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
      },
      {
        "name": "Small",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
      },
      {
        "name": "storeRegistry",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "signal<Record<string, Signal<unknown>>>({})"
      },
      {
        "name": "synchronizationInitialized",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "false"
      },
      {
        "name": "UserRoleEnumChoices",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/user/user.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "enumArray(UserRoleEnum)"
      },
      {
        "name": "UserStore",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/user/user.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "signalStore(\n  withDevtools('users'),\n  withState<UserState>(initialState),\n  withComputed(({ user }) => ({\n    userDisplayRole: computed(() => {\n      const currentUser = user();\n      if (currentUser != null) {\n        return UserRoleEnum[currentUser.role];\n      }\n      return null;\n    }),\n  })),\n  withMethods(store => ({\n    syncCachedUser(): void {\n      const savedUser: string | null = localStorage.getItem('user');\n      if (savedUser) {\n        const user: UserModel = JSON.parse(savedUser);\n        patchState(store, () => ({ user }));\n      }\n    },\n    setUser(user: UserModel): void {\n      patchState(store, () => ({ user }));\n      localStorage.setItem('user', JSON.stringify(user));\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      store.syncCachedUser();\n    },\n  })\n)"
      },
      {
        "name": "voteChoices",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/room/room.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "[\n  '0',\n  '0.5',\n  '1',\n  '2',\n  '3',\n  '5',\n  '8',\n  '13+',\n  '?',\n] as const"
      }
    ],
    "functions": [
      {
        "name": "enumArray",
        "file": "src/libs/utils/utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "obj",
            "type": "TEnum",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "K[]",
        "jsdoctags": [
          {
            "name": "obj",
            "type": "TEnum",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "forbiddenValuesValidator",
        "file": "src/libs/utils/validators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "forbiddenValues",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "ValidatorFn",
        "jsdoctags": [
          {
            "name": "forbiddenValues",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getStoreSignal",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "Signal<>",
        "jsdoctags": [
          {
            "name": "store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getValueFromSymbol",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "obj",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "symbol",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "obj",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "symbol",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "initSynchronization",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "reset",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>required for testing. is not exported during build</p>\n",
        "args": []
      },
      {
        "name": "withDevtools",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "name",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "SignalStoreFeature<Input, EmptyFeatureResult>",
        "jsdoctags": [
          {
            "name": {
              "pos": 2246,
              "end": 2250,
              "flags": 16777216,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 80,
              "escapedText": "name"
            },
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 2240,
              "end": 2245,
              "flags": 16777216,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 80,
              "escapedText": "param"
            },
            "comment": "<p>store&#39;s name as it should appear in the DevTools</p>\n"
          }
        ]
      }
    ],
    "typealiases": [
      {
        "name": "Action",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "ConnectResponse",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "EmptyFeatureResult",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "EnumType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/utils/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "EnumValueType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": " | string",
        "file": "src/libs/utils/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "RoomModel",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/data-models/room/room.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "RoomState",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/data-models/room/room.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "RoomStore",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "InstanceType<>",
        "file": "src/libs/data-models/room/room.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ButtonComponent>",
        "file": "src/stories/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<HeaderComponent>",
        "file": "src/stories/header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<PageComponent>",
        "file": "src/stories/page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<PokerCardComponent>",
        "file": "src/stories/poker-card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "UserModel",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/data-models/user/user.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "UserState",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/data-models/user/user.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "UserStore",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "InstanceType<>",
        "file": "src/libs/data-models/user/user.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "VoteChoice",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "src/libs/data-models/room/room.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 199
      }
    ],
    "enumerations": [
      {
        "name": "UserRoleEnum",
        "childs": [
          {
            "name": "Player",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "Observer",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/libs/data-models/user/user.model.ts"
      }
    ],
    "groupedVariables": {
      "src/app/app.config.ts": [
        {
          "name": "appConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ApplicationConfig",
          "defaultValue": "{\n  providers: [\n    provideRouter(routes, withComponentInputBinding()),\n    { provide: TitleStrategy, useClass: TemplatePageTitleStrategy },\n    provideAnimationsAsync(),\n    importProvidersFrom(MqttModule.forRoot(environment.mqttConfigOptions)),\n  ],\n}"
        }
      ],
      "src/libs/utils/with-devtools.ts": [
        {
          "name": "connection",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ConnectResponse | undefined"
        },
        {
          "name": "currentActionNames",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new Set<string>()"
        },
        {
          "name": "storeRegistry",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "signal<Record<string, Signal<unknown>>>({})"
        },
        {
          "name": "synchronizationInitialized",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "false"
        }
      ],
      "src/stories/poker-card.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/poker-card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    // @ts-ignore\n    content: signal('Test'),\n    // @ts-ignore\n    size: 'S',\n    // @ts-ignore\n    disabled: false,\n    // @ts-ignore\n    private: false,\n    // @ts-ignore\n    active: false,\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/poker-card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<PokerCardComponent>",
          "defaultValue": "{\n  title: 'Example/Button',\n  component: PokerCardComponent,\n  tags: ['autodocs'],\n}"
        }
      ],
      "src/environments/environment.production.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.production.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EnvironmentConfig",
          "defaultValue": "{\n  appVersion: '#RELEASE_VERSION',\n  production: false,\n  env: 'production',\n\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: '#MQTT_HOST',\n    username: '#MQTT_USER',\n    password: '#MQTT_PWD',\n  },\n}"
        }
      ],
      "src/environments/environment.staging.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.staging.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EnvironmentConfig",
          "defaultValue": "{\n  appVersion: '#RELEASE_VERSION',\n  production: true,\n  env: 'staging',\n\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: '#MQTT_HOST',\n    username: '#MQTT_USER',\n    password: '#MQTT_PWD',\n  },\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EnvironmentConfig",
          "defaultValue": "{\n  appVersion: 'dev',\n  production: false,\n  env: 'dev',\n\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: 'localhost',\n    username: 'user',\n    password: 'password',\n  },\n}"
        }
      ],
      "src/environments/environment-type.ts": [
        {
          "name": "ENVIRONMENT_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment-type.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken('ENVIRONMENT_CONFIG')"
        },
        {
          "name": "mqttDefaults",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment-type.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMqttServiceOptions",
          "defaultValue": "{\n  port: 8080,\n  path: '/mqtt',\n  protocolVersion: 5,\n}"
        }
      ],
      "src/libs/data-models/room/room.store.ts": [
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/room/room.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RoomState",
          "defaultValue": "{\n  currentRoom: roomDefault,\n  availableRooms: [],\n}"
        },
        {
          "name": "RoomStore",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/room/room.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "signalStore(\n  withDevtools('rooms'),\n  withState<RoomState>(initialState),\n  withComputed(({ currentRoom }) => ({\n    currentVotes: computed(\n      () => currentRoom.votePerRoundPerPlayer()[currentRoom.currentRound()]\n    ),\n    historyVotes: computed(() => {\n      return Object.fromEntries(\n        Object.entries(currentRoom.votePerRoundPerPlayer()).filter(\n          ([round]) => Number(round) != currentRoom.currentRound()\n        )\n      );\n    }),\n    currentPlayers: computed(() =>\n      Object.keys(\n        currentRoom.votePerRoundPerPlayer()[currentRoom.currentRound()]\n      )\n    ),\n  })),\n  withMethods((store, roomService = inject(RoomService)) => {\n    function getCurrentRound(name: string) {\n      console.debug('getCurrentRound', name);\n      return roomService.getCurrentRound(name).pipe(\n        tapResponse({\n          next: (currentRound: number) => {\n            console.debug('service getCurrentRound', name, currentRound);\n            patchState(store, state => {\n              if (state.currentRoom.currentRound !== currentRound) {\n                const currentPlayers = Object.keys(\n                  state.currentRoom.votePerRoundPerPlayer[\n                    state.currentRoom.currentRound\n                  ]\n                );\n                // update round, clone player\n                return {\n                  currentRoom: {\n                    ...state.currentRoom,\n                    currentRound,\n                    votePerRoundPerPlayer: {\n                      ...state.currentRoom.votePerRoundPerPlayer,\n                      [currentRound]: Object.fromEntries(\n                        currentPlayers.map(player => [player, null])\n                      ),\n                    },\n                  } as RoomModel,\n                };\n              } else {\n                return {};\n              }\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    function getPlayers(name: string) {\n      console.debug('getPlayers', name);\n      return roomService.getPlayers(name).pipe(\n        tapResponse({\n          next: ({ player, isDeleted }) => {\n            console.debug('service getPlayers', name, player, isDeleted);\n            patchState(store, state => {\n              if (isDeleted) {\n                const { [player]: removedKey, ...roundVoteWithoutPlayer } =\n                  state.currentRoom.votePerRoundPerPlayer[\n                    state.currentRoom.currentRound\n                  ];\n                return {\n                  currentRoom: {\n                    ...state.currentRoom,\n                    votePerRoundPerPlayer: {\n                      ...state.currentRoom.votePerRoundPerPlayer,\n                      [state.currentRoom.currentRound]: roundVoteWithoutPlayer,\n                    },\n                  } as RoomModel,\n                };\n              }\n              return {\n                currentRoom: {\n                  ...state.currentRoom,\n                  votePerRoundPerPlayer: {\n                    ...state.currentRoom.votePerRoundPerPlayer,\n                    [state.currentRoom.currentRound]: {\n                      ...state.currentRoom.votePerRoundPerPlayer[\n                        state.currentRoom.currentRound\n                      ],\n                      [player]: null,\n                    },\n                  },\n                },\n              };\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    function getVotes(name: string) {\n      console.debug('getVotes', name);\n      return roomService.getVotes(name).pipe(\n        tapResponse({\n          next: ({ roundNumber, player, voteOption }) => {\n            console.debug(\n              'service getVotes',\n              name,\n              roundNumber,\n              player,\n              voteOption\n            );\n            patchState(store, state => ({\n              currentRoom: {\n                ...state.currentRoom,\n                votePerRoundPerPlayer: {\n                  ...state.currentRoom.votePerRoundPerPlayer,\n                  [roundNumber]: {\n                    ...state.currentRoom.votePerRoundPerPlayer[roundNumber],\n                    [player]: voteOption,\n                  },\n                },\n              } as RoomModel,\n            }));\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    return {\n      listAll: rxMethod<void>(\n        exhaustMap(() => {\n          console.debug('listAll');\n          return roomService.listAll().pipe(\n            tapResponse({\n              next: (availableRoom: string) =>\n                patchState(store, state => ({\n                  availableRooms: [...state.availableRooms, availableRoom],\n                })),\n              error: console.error,\n            })\n          );\n        })\n      ),\n\n      addPlayerToRoom(\n        roomName: string,\n        playerName: string,\n        onComplete: (() => void) | undefined = undefined\n      ): void {\n        console.debug('addPlayerToRoom', roomName, playerName);\n        roomService.addPlayerToRoom(roomName, playerName, onComplete);\n      },\n\n      vote(\n        currentRoom: RoomModel,\n        user: UserModel | null,\n        voteOption: VoteChoice\n      ): void {\n        console.debug('vote', currentRoom, user, voteOption);\n        return roomService.vote(\n          currentRoom.name,\n          currentRoom.currentRound,\n          user,\n          voteOption\n        );\n      },\n\n      getOne: rxMethod<string>(\n        exhaustMap((name: string) => {\n          console.debug('getOne', name);\n          patchState(store, state => ({\n            currentRoom: {\n              ...state.currentRoom,\n              name,\n            } as RoomModel,\n          }));\n          return merge(getPlayers(name), getCurrentRound(name), getVotes(name));\n        })\n      ),\n    };\n  })\n)"
        }
      ],
      "src/libs/data-models/user/user.store.ts": [
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/user/user.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "UserState",
          "defaultValue": "{\n  user: null,\n}"
        },
        {
          "name": "UserStore",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/user/user.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "signalStore(\n  withDevtools('users'),\n  withState<UserState>(initialState),\n  withComputed(({ user }) => ({\n    userDisplayRole: computed(() => {\n      const currentUser = user();\n      if (currentUser != null) {\n        return UserRoleEnum[currentUser.role];\n      }\n      return null;\n    }),\n  })),\n  withMethods(store => ({\n    syncCachedUser(): void {\n      const savedUser: string | null = localStorage.getItem('user');\n      if (savedUser) {\n        const user: UserModel = JSON.parse(savedUser);\n        patchState(store, () => ({ user }));\n      }\n    },\n    setUser(user: UserModel): void {\n      patchState(store, () => ({ user }));\n      localStorage.setItem('user', JSON.stringify(user));\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      store.syncCachedUser();\n    },\n  })\n)"
        }
      ],
      "src/stories/button.stories.ts": [
        {
          "name": "Large",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<ButtonComponent>",
          "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
        },
        {
          "name": "Secondary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
        },
        {
          "name": "Small",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
        }
      ],
      "src/stories/header.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<HeaderComponent>",
          "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
        }
      ],
      "src/stories/page.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<PageComponent>",
          "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
        }
      ],
      ".storybook/preview.ts": [
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": ".storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
        }
      ],
      "src/app/app.routes.ts": [
        {
          "name": "resolvedRoomTitle",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.routes.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ResolveFn<string>",
          "defaultValue": "(route: ActivatedRouteSnapshot) =>\n  `Room ${route.paramMap.get('roomName')}`"
        }
      ],
      "src/libs/data-models/room/room.model.ts": [
        {
          "name": "roomDefault",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/room/room.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "{\n  currentRound: 0,\n  votePerRoundPerPlayer: { 0: {} },\n  name: '',\n} as RoomModel"
        },
        {
          "name": "voteChoices",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/room/room.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "[\n  '0',\n  '0.5',\n  '1',\n  '2',\n  '3',\n  '5',\n  '8',\n  '13+',\n  '?',\n] as const"
        }
      ],
      "src/libs/data-models/user/user.model.ts": [
        {
          "name": "UserRoleEnumChoices",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/user/user.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "enumArray(UserRoleEnum)"
        }
      ]
    },
    "groupedFunctions": {
      "src/libs/utils/utils.ts": [
        {
          "name": "enumArray",
          "file": "src/libs/utils/utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "obj",
              "type": "TEnum",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "K[]",
          "jsdoctags": [
            {
              "name": "obj",
              "type": "TEnum",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/libs/utils/validators.ts": [
        {
          "name": "forbiddenValuesValidator",
          "file": "src/libs/utils/validators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "forbiddenValues",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "ValidatorFn",
          "jsdoctags": [
            {
              "name": "forbiddenValues",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/libs/utils/with-devtools.ts": [
        {
          "name": "getStoreSignal",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "store",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "Signal<>",
          "jsdoctags": [
            {
              "name": "store",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getValueFromSymbol",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "obj",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "symbol",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "obj",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "symbol",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initSynchronization",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "reset",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>required for testing. is not exported during build</p>\n",
          "args": []
        },
        {
          "name": "withDevtools",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "SignalStoreFeature<Input, EmptyFeatureResult>",
          "jsdoctags": [
            {
              "name": {
                "pos": 2246,
                "end": 2250,
                "flags": 16777216,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "name"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2240,
                "end": 2245,
                "flags": 16777216,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "<p>store&#39;s name as it should appear in the DevTools</p>\n"
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {
      "src/libs/data-models/user/user.model.ts": [
        {
          "name": "UserRoleEnum",
          "childs": [
            {
              "name": "Player",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "Observer",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/libs/data-models/user/user.model.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "src/libs/utils/with-devtools.ts": [
        {
          "name": "Action",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "ConnectResponse",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "EmptyFeatureResult",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ],
      "src/libs/utils/utils.ts": [
        {
          "name": "EnumType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/utils/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "EnumValueType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": " | string",
          "file": "src/libs/utils/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/libs/data-models/room/room.model.ts": [
        {
          "name": "RoomModel",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/data-models/room/room.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "VoteChoice",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "src/libs/data-models/room/room.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 199
        }
      ],
      "src/libs/data-models/room/room.store.ts": [
        {
          "name": "RoomState",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/data-models/room/room.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "RoomStore",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "InstanceType<>",
          "file": "src/libs/data-models/room/room.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/stories/button.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ButtonComponent>",
          "file": "src/stories/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/stories/header.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<HeaderComponent>",
          "file": "src/stories/header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/stories/page.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<PageComponent>",
          "file": "src/stories/page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/stories/poker-card.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<PokerCardComponent>",
          "file": "src/stories/poker-card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/libs/data-models/user/user.model.ts": [
        {
          "name": "UserModel",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/data-models/user/user.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ],
      "src/libs/data-models/user/user.store.ts": [
        {
          "name": "UserState",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/data-models/user/user.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "UserStore",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "InstanceType<>",
          "file": "src/libs/data-models/user/user.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 3,
    "status": "low",
    "files": [
      {
        "filePath": ".storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/app.config.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TemplatePageTitleStrategy",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/app.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "appConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.routes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "resolvedRoomTitle",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/lobby/lobby.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LobbyComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/lobby/room-list-dialog/room-list-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RoomListDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/page-not-found/page-not-found.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageNotFoundComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/room/poker-card/poker-card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PokerCardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/room/poker-table/poker-table.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PokerTableComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/room/room.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RoomComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/room/share-room/share-room.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ShareRoomComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/room/vote-history/vote-history.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "VoteHistoryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/user/user-creation-dialog/user-creation-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserCreationDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/user/user-deck/user-deck.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserDeckComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/user/user-profile/user-profile.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserProfileComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment-type.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "EnvironmentConfig",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment-type.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ENVIRONMENT_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment-type.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "mqttDefaults",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.production.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.staging.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "roomDefault",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "voteChoices",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "RoomService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.store.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.store.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "RoomStore",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/user/user.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UserRoleEnumChoices",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/user/user.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserService",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/user/user.store.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/user/user.store.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UserStore",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/utils.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "enumArray",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/validators.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "forbiddenValuesValidator",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Window",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getStoreSignal",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getValueFromSymbol",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "initSynchronization",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "reset",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "withDevtools",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "connection",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "currentActionNames",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "storeRegistry",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "synchronizationInitialized",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 83,
        "coverageCount": "5/6",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Large",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Secondary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Small",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/poker-card.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/poker-card.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/user.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "User",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      }
    ]
  }
}
