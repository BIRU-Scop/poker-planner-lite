{
  "pipes": [],
  "interfaces": [
    {
      "name": "EnvironmentConfig",
      "id": "interface-EnvironmentConfig-d246026a0e4f28a7e34f8012c95c01d5779819e369d7ebcce578806cf9ff9e84b4f72ce28a7db2014ee0ec764bfb582dd847786c03170cc23d138ba87b07bf67",
      "file": "src/environments/environment-type.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { InjectionToken } from '@angular/core';\nimport { IMqttServiceOptions } from 'ngx-mqtt';\n\nexport const ENVIRONMENT_CONFIG = new InjectionToken('ENVIRONMENT_CONFIG');\n\nexport interface EnvironmentConfig {\n  appVersion: string;\n  production: boolean;\n  env: 'dev' | 'staging' | 'production';\n\n  defaultCountdown: number; // in seconds\n  mqttConfigOptions: IMqttServiceOptions;\n}\n\nexport const mqttDefaults: IMqttServiceOptions = {\n  port: 8080,\n  path: '/mqtt',\n  protocolVersion: 5,\n};\n",
      "properties": [
        {
          "name": "appVersion",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "defaultCountdown",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "env",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"dev\" | \"staging\" | \"production\"",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "mqttConfigOptions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMqttServiceOptions",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "production",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "Window",
      "id": "interface-Window-5737635310ac7872b7ea4fb6d1080eb56ec1480ae82eb201454729579370f16e10a30d55bc3a9421de0d3e0939e3cd63f9b19f7968cfa7b3591475eee373a55d",
      "file": "src/libs/utils/with-devtools.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { SignalStoreFeature } from '@ngrx/signals';\nimport { SignalStoreFeatureResult } from '@ngrx/signals/src/signal-store-models';\nimport { effect, inject, PLATFORM_ID, signal, Signal } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__:\n      | {\n          connect: (options: { name: string }) => {\n            send: (action: Action, state: Record<string, unknown>) => void;\n          };\n        }\n      | undefined;\n  }\n}\n\ntype EmptyFeatureResult = {\n  state: NonNullable<unknown>;\n  signals: NonNullable<unknown>;\n  methods: NonNullable<unknown>;\n};\nexport type Action = { type: string };\n\nconst storeRegistry = signal<Record<string, Signal<unknown>>>({});\n\nlet currentActionNames = new Set<string>();\n\nlet synchronizationInitialized = false;\n\nfunction initSynchronization() {\n  effect(() => {\n    if (!connection) {\n      return;\n    }\n\n    const stores = storeRegistry();\n    const rootState: Record<string, unknown> = {};\n    for (const name in stores) {\n      const store = stores[name];\n      rootState[name] = store();\n    }\n\n    const names = Array.from(currentActionNames);\n    const type = names.length ? names.join(', ') : 'Store Update';\n    currentActionNames = new Set<string>();\n\n    connection.send({ type }, rootState);\n  });\n}\n\nfunction getValueFromSymbol(obj: unknown, symbol: symbol) {\n  if (typeof obj === 'object' && obj && symbol in obj) {\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    return (obj as { [key: symbol]: any })[symbol];\n  }\n}\n\nfunction getStoreSignal(store: unknown): Signal<unknown> {\n  const [signalStateKey] = Object.getOwnPropertySymbols(store);\n  if (!signalStateKey) {\n    throw new Error('Cannot find State Signal');\n  }\n\n  return getValueFromSymbol(store, signalStateKey);\n}\n\ntype ConnectResponse = {\n  send: (action: Action, state: Record<string, unknown>) => void;\n};\nlet connection: ConnectResponse | undefined;\n\n/**\n * required for testing. is not exported during build\n */\nexport function reset() {\n  connection = undefined;\n  synchronizationInitialized = false;\n  storeRegistry.set({});\n}\n\n/**\n * @param name store's name as it should appear in the DevTools\n */\nexport function withDevtools<Input extends SignalStoreFeatureResult>(\n  name: string\n): SignalStoreFeature<Input, EmptyFeatureResult> {\n  return store => {\n    const isServer = isPlatformServer(inject(PLATFORM_ID));\n    if (isServer) {\n      return store;\n    }\n\n    const extensions = window.__REDUX_DEVTOOLS_EXTENSION__;\n    if (!extensions) {\n      return store;\n    }\n\n    if (!connection) {\n      connection = extensions.connect({\n        name: 'NgRx Signal Store',\n      });\n    }\n\n    const storeSignal = getStoreSignal(store);\n    storeRegistry.update(value => ({\n      ...value,\n      [name]: storeSignal,\n    }));\n\n    if (!synchronizationInitialized) {\n      initSynchronization();\n      synchronizationInitialized = true;\n    }\n\n    return store;\n  };\n}\n",
      "properties": [
        {
          "name": "__REDUX_DEVTOOLS_EXTENSION__",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type | undefined",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    }
  ],
  "injectables": [
    {
      "name": "RoomService",
      "id": "injectable-RoomService-d2ed5626b610d159e12fd3a362feddaddbbe86bbe3ed4c9abe84ebbc1440dd7c6457b5441953f874066c29b6081363840394c7d533b1dbcba4a93ac2857ec2f2",
      "file": "src/libs/data-models/room/room.service.ts",
      "properties": [
        {
          "name": "mqttService",
          "defaultValue": "inject(MqttService)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [148]
        }
      ],
      "methods": [
        {
          "name": "addPlayerToRoom",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "playerName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "onComplete",
              "type": " | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "undefined"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "playerName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onComplete",
              "type": " | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "undefined",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCurrentRound",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPlayers",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<literal type>",
          "typeParameters": [],
          "line": 56,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getVotes",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<literal type>",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "listAll",
          "args": [],
          "optional": false,
          "returnType": "Observable<string>",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "removePlayerFromRoom",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "playerName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "playerName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setRound",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "newRound",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "newRound",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "vote",
          "args": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "currentRound",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "user",
              "type": "UserModel | null",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "voteOption",
              "type": "VoteChoice",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 106,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "roomName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "currentRound",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "user",
              "type": "UserModel | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "voteOption",
              "type": "VoteChoice",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { distinct, map, Observable, retry, tap } from 'rxjs';\nimport { IMqttMessage, MqttService } from 'ngx-mqtt';\nimport { VoteChoice } from './room.model';\nimport { UserModel, UserRoleEnum } from '../user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoomService {\n  readonly mqttService = inject(MqttService);\n  listAll(): Observable<string> {\n    return this.mqttService\n      .observe('rooms/+/connected-players/+', { qos: 0 })\n      .pipe(\n        tap((message: IMqttMessage) => console.debug(message)),\n        map((message: IMqttMessage) => {\n          const result = /^rooms\\/([-\\w]+)\\//.exec(message.topic);\n          return result ? result[1] : '';\n        }),\n        distinct()\n      );\n  }\n  addPlayerToRoom(\n    roomName: string,\n    playerName: string,\n    onComplete: (() => void) | undefined = undefined\n  ): void {\n    this.mqttService\n      .publish(`rooms/${roomName}/connected-players/${playerName}`, '1', {\n        qos: 1,\n        retain: true,\n        properties: {\n          payloadFormatIndicator: true,\n          messageExpiryInterval: 21600, // 6 hours\n        },\n      })\n      .pipe(retry({ count: 3, delay: 1000, resetOnSuccess: true }))\n      .subscribe({ complete: onComplete, error: console.error });\n  }\n\n  removePlayerFromRoom(roomName: string, playerName: string) {\n    this.mqttService\n      .publish(`rooms/${roomName}/connected-players/${playerName}`, '', {\n        qos: 1,\n        retain: true,\n        properties: {\n          payloadFormatIndicator: true,\n          messageExpiryInterval: 21600, // 6 hours\n        },\n      })\n      .pipe(retry({ count: 3, delay: 1000, resetOnSuccess: true }))\n      .subscribe({ error: console.error });\n  }\n\n  getPlayers(\n    roomName: string\n  ): Observable<{ player: string; isDeleted: boolean }> {\n    return this.mqttService\n      .observe(`rooms/${roomName}/connected-players/+`, { qos: 0 })\n      .pipe(\n        tap((message: IMqttMessage) => console.debug(message)),\n        map((message: IMqttMessage) => {\n          const result = /([-\\w]+)$/.exec(message.topic);\n          const playerName = result ? result[1] : '';\n          return {\n            player: playerName,\n            isDeleted: message.payload.toString() !== '1',\n          };\n        })\n      );\n  }\n\n  getCurrentRound(roomName: string) {\n    return this.mqttService\n      .observe(`rooms/${roomName}/current-round/`, { qos: 0 })\n      .pipe(\n        tap((message: IMqttMessage) => console.debug(message)),\n        map((message: IMqttMessage) => Number(message.payload.toString()))\n      );\n  }\n\n  getVotes(roomName: string): Observable<{\n    roundNumber: number;\n    player: string;\n    voteOption: VoteChoice;\n  }> {\n    return this.mqttService\n      .observe(`rooms/${roomName}/votes/#`, { qos: 0 })\n      .pipe(\n        tap((message: IMqttMessage) => console.debug(message)),\n        map((message: IMqttMessage) => {\n          const result = /(\\d+)\\/([-\\w]+)$/.exec(message.topic);\n          console.debug(result);\n          const roundNumber = result ? Number(result[1]) : 0;\n          const player = result ? result[2] : '';\n          return {\n            roundNumber: roundNumber,\n            player: player,\n            voteOption: message.payload.toString() as VoteChoice,\n          };\n        })\n      );\n  }\n\n  vote(\n    roomName: string,\n    currentRound: number,\n    user: UserModel | null,\n    voteOption: VoteChoice\n  ): void {\n    if (!user || user.role == UserRoleEnum.Observer) {\n      return;\n    }\n    this.mqttService\n      .publish(\n        `rooms/${roomName}/votes/${currentRound}/${user.name}`,\n        voteOption,\n        {\n          qos: 1,\n          retain: true,\n          properties: {\n            payloadFormatIndicator: true,\n            messageExpiryInterval: 300, // 5min\n          },\n        }\n      )\n      .pipe(retry({ count: 3, delay: 1000, resetOnSuccess: true }))\n      .subscribe({ error: console.error });\n  }\n\n  setRound(roomName: string, newRound: number) {\n    this.mqttService\n      .publish(`rooms/${roomName}/current-round/`, newRound.toString(), {\n        qos: 1,\n        retain: true,\n        properties: {\n          payloadFormatIndicator: true,\n          messageExpiryInterval: 21600, // 6h\n        },\n      })\n      .pipe(retry({ count: 3, delay: 1000, resetOnSuccess: true }))\n      .subscribe({ error: console.error });\n  }\n}\n",
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "TemplatePageTitleStrategy",
      "id": "injectable-TemplatePageTitleStrategy-c1c883df75bd1ea560ba8f36ee1098a9b6c546fa8d4e46fd3e952685e0a147d2e87f89bd160b722e1bdd5d93fa0cb7da16a1b0ecb3c790a14b387277b41589ad",
      "file": "src/app/app.config.ts",
      "properties": [],
      "methods": [
        {
          "name": "updateTitle",
          "args": [
            {
              "name": "routerState",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [164],
          "jsdoctags": [
            {
              "name": "routerState",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  ApplicationConfig,\n  importProvidersFrom,\n  Injectable,\n} from '@angular/core';\nimport {\n  provideRouter,\n  RouterStateSnapshot,\n  TitleStrategy,\n  withComponentInputBinding,\n} from '@angular/router';\n\nimport { routes } from './app.routes';\nimport { Title } from '@angular/platform-browser';\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\nimport { MqttModule } from 'ngx-mqtt';\nimport { environment } from '../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TemplatePageTitleStrategy extends TitleStrategy {\n  constructor(private readonly title: Title) {\n    super();\n  }\n  override updateTitle(routerState: RouterStateSnapshot) {\n    const title = this.buildTitle(routerState);\n    if (title !== undefined) {\n      this.title.setTitle(`Poker Planner Lite | ${title}`);\n    }\n  }\n}\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes, withComponentInputBinding()),\n    { provide: TitleStrategy, useClass: TemplatePageTitleStrategy },\n    provideAnimationsAsync(),\n    importProvidersFrom(MqttModule.forRoot(environment.mqttConfigOptions)),\n  ],\n};\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "title",
            "type": "Title",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "title",
            "type": "Title",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": ["TitleStrategy"],
      "type": "injectable"
    },
    {
      "name": "UserService",
      "id": "injectable-UserService-c8cd8f13dd269da839180f9557967bc69f53bb5a5406f6835c95b4c7a337e60c06f4f40d2914deed1db01e2d96cde3fff04666ae0411b7a0b472608653a9716e",
      "file": "src/libs/data-models/user/user.service.ts",
      "properties": [],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {}\n",
      "extends": [],
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-ee62d3f5c8569cd6d5a7977d8d10d5bb7bc10401a32e53a7d32613524eeef6230b812c4671443fa652638907c530f1e1363d8d0e425b04286dc8a1a2559a9a26",
      "file": "src/app/app.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": [],
      "styles": [""],
      "template": "<main class=\"mat-typography\">\n  <router-outlet />\n</main>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "'poker-planner-lite'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "RouterOutlet"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [RouterOutlet],\n  template: `\n    <main class=\"mat-typography\">\n      <router-outlet />\n    </main>\n  `,\n  styles: ``,\n})\nexport class AppComponent {\n  title = 'poker-planner-lite';\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "LobbyComponent",
      "id": "component-LobbyComponent-a1e22fe9d5e86722cde6c6eca04c21bc72dbfe919c25cc62278a28634d705deb7f828350ce0ca317d5de48c39e439ff48d56b0cdea3cd3a3e91daa9650189419",
      "file": "src/app/lobby/lobby.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "RoomStore"
        }
      ],
      "selector": "app-lobby",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"p-4\">\n  <div class=\"flex gap-1 items-center place-content-center\">\n    <img\n      class=\"max-w-28\"\n      ngSrc=\"assets/logo.svg\"\n      alt=\"Poker Planner Lite logo\"\n      width=\"289.25\"\n      height=\"284.7\"\n      priority />\n    <h1>Poker Planner Lite</h1>\n  </div>\n  <div class=\"flex justify-evenly pt-10\">\n    <button mat-flat-button color=\"primary\" (click)=\"openDialog()\">\n      Join a room\n    </button>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dialog",
          "defaultValue": "inject(MatDialog)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [148]
        },
        {
          "name": "store",
          "defaultValue": "inject(RoomStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "openDialog",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "NgOptimizedImage"
        },
        {
          "name": "MatCardModule",
          "type": "module"
        },
        {
          "name": "MatButtonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { RoomStore } from '@poker/data-models';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialog } from '@angular/material/dialog';\nimport { RoomListDialogComponent } from './room-list-dialog/room-list-dialog.component';\nimport { NgOptimizedImage } from '@angular/common';\n\n@Component({\n  selector: 'app-lobby',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgOptimizedImage, MatCardModule, MatButtonModule],\n  template: `\n    <div class=\"p-4\">\n      <div class=\"flex gap-1 items-center place-content-center\">\n        <img\n          class=\"max-w-28\"\n          ngSrc=\"assets/logo.svg\"\n          alt=\"Poker Planner Lite logo\"\n          width=\"289.25\"\n          height=\"284.7\"\n          priority />\n        <h1>Poker Planner Lite</h1>\n      </div>\n      <div class=\"flex justify-evenly pt-10\">\n        <button mat-flat-button color=\"primary\" (click)=\"openDialog()\">\n          Join a room\n        </button>\n      </div>\n    </div>\n  `,\n  styles: ``,\n  providers: [RoomStore],\n})\nexport class LobbyComponent {\n  readonly store = inject(RoomStore);\n  readonly dialog = inject(MatDialog);\n\n  constructor() {\n    this.store.listAll();\n  }\n\n  openDialog(): void {\n    this.dialog.open(RoomListDialogComponent, {\n      data: this.store,\n      maxHeight: '80vh',\n      panelClass: 'w-full',\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 38
      },
      "extends": []
    },
    {
      "name": "PageNotFoundComponent",
      "id": "component-PageNotFoundComponent-d0bdb4ce3548e0681c5f55f55be779da23823e5b1ae58e1198e9abde4e4390b4105aa7846c67eb55849a9f64da98d7433565d653e23228d98bc54255b3ade8cd",
      "file": "src/app/page-not-found/page-not-found.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-page-not-found",
      "styleUrls": [],
      "styles": [""],
      "template": "<p>404 page not found</p>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n  template: `<p>404 page not found</p>`,\n  styles: ``,\n})\nexport class PageNotFoundComponent {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "PokerCardComponent",
      "id": "component-PokerCardComponent-74f321346812cb663c5fd21eca8f634379e5e51a1861acf947da96527ebd4db85fc083bcc9dd011539358b280dc00d1352c57bb19c92d0c362bb784159d262f9",
      "file": "src/app/room/poker-card/poker-card.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-poker-card",
      "styleUrls": [],
      "styles": [
        "\n    .private {\n      @apply bg-gray-200 border-gray-400;\n    }\n    .active {\n      @apply bg-emerald-300 border-emerald-500;\n    }\n    .active:not([disabled]) {\n      @apply hover:bg-emerald-200 hover:border-emerald-400;\n    }\n    .poker-card:not(.active, .private) {\n      @apply border-blue-400 bg-blue-100 hover:bg-blue-50 hover:border-blue-300;\n    }\n  "
      ],
      "template": "<button\n  class=\"poker-card p-3 shadow group border-4 rounded-lg\"\n  [class]=\"\n    size() === 'S' ? ['w-16', 'h-20', 'p-2'] : ['w-20', 'h-28', 'p-3']\n  \"\n  [class.private]=\"private()\"\n  [class.active]=\"active()\"\n  [disabled]=\"disabled() || private()\">\n  @if (private()) {\n    <div\n      class=\"h-full w-full bg-stripes\"\n      [class]=\"\n        active()\n          ? ['bg-emerald-500', 'bg-stripes-emerald-300']\n          : ['bg-gray-400', 'bg-stripes-gray-200']\n      \"></div>\n  } @else {\n    <div\n      class=\"h-full w-full flex flex-col place-content-center rounded-md border\"\n      [class]=\"\n        active()\n          ? disabled()\n            ? ['border-emerald-500', 'bg-slate-100']\n            : [\n                'border-emerald-500',\n                'bg-slate-100',\n                'group-hover:bg-slate-50',\n                'group-hover:border-emerald-400'\n              ]\n          : [\n              'border-blue-400',\n              'bg-slate-100',\n              'group-hover:bg-slate-50',\n              'group-hover:border-blue-300'\n            ]\n      \">\n      <span class=\"\" [class]=\"{ 'text-2xl': size() === 'L' }\">\n        {{ content() }}\n      </span>\n    </div>\n  }\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "active",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 73
        },
        {
          "name": "content",
          "defaultValue": "input.required<string | null>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "disabled",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "private",
          "defaultValue": "input<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "size",
          "defaultValue": "input<'S' | 'L'>('S')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 70
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "NgClass"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { NgClass } from '@angular/common';\n\n@Component({\n  selector: 'app-poker-card',\n  standalone: true,\n  imports: [NgClass],\n  template: `\n    <button\n      class=\"poker-card p-3 shadow group border-4 rounded-lg\"\n      [class]=\"\n        size() === 'S' ? ['w-16', 'h-20', 'p-2'] : ['w-20', 'h-28', 'p-3']\n      \"\n      [class.private]=\"private()\"\n      [class.active]=\"active()\"\n      [disabled]=\"disabled() || private()\">\n      @if (private()) {\n        <div\n          class=\"h-full w-full bg-stripes\"\n          [class]=\"\n            active()\n              ? ['bg-emerald-500', 'bg-stripes-emerald-300']\n              : ['bg-gray-400', 'bg-stripes-gray-200']\n          \"></div>\n      } @else {\n        <div\n          class=\"h-full w-full flex flex-col place-content-center rounded-md border\"\n          [class]=\"\n            active()\n              ? disabled()\n                ? ['border-emerald-500', 'bg-slate-100']\n                : [\n                    'border-emerald-500',\n                    'bg-slate-100',\n                    'group-hover:bg-slate-50',\n                    'group-hover:border-emerald-400'\n                  ]\n              : [\n                  'border-blue-400',\n                  'bg-slate-100',\n                  'group-hover:bg-slate-50',\n                  'group-hover:border-blue-300'\n                ]\n          \">\n          <span class=\"\" [class]=\"{ 'text-2xl': size() === 'L' }\">\n            {{ content() }}\n          </span>\n        </div>\n      }\n    </button>\n  `,\n  styles: `\n    .private {\n      @apply bg-gray-200 border-gray-400;\n    }\n    .active {\n      @apply bg-emerald-300 border-emerald-500;\n    }\n    .active:not([disabled]) {\n      @apply hover:bg-emerald-200 hover:border-emerald-400;\n    }\n    .poker-card:not(.active, .private) {\n      @apply border-blue-400 bg-blue-100 hover:bg-blue-50 hover:border-blue-300;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PokerCardComponent {\n  content = input.required<string | null>();\n  size = input<'S' | 'L'>('S');\n  disabled = input<boolean>(false);\n  private = input<boolean>(false);\n  active = input<boolean>(false);\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n    .private {\n      @apply bg-gray-200 border-gray-400;\n    }\n    .active {\n      @apply bg-emerald-300 border-emerald-500;\n    }\n    .active:not([disabled]) {\n      @apply hover:bg-emerald-200 hover:border-emerald-400;\n    }\n    .poker-card:not(.active, .private) {\n      @apply border-blue-400 bg-blue-100 hover:bg-blue-50 hover:border-blue-300;\n    }\n  \n",
      "extends": []
    },
    {
      "name": "PokerTableComponent",
      "id": "component-PokerTableComponent-639078d2d940bc7781d9afc42d1029aeb834c4cd5d9239391d667db762447001e0f51e7fd5985b47a6b5d06cd7d4f76efaff2b60622e1dc6084707e2c019daa8",
      "file": "src/app/room/poker-table/poker-table.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-poker-table",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"flex gap-3 place-content-center\">\n  @for (item of roomStore.currentVotes() | keyvalue; track item.key) {\n    @if (item.key !== userStore.user()?.name) {\n      <div class=\"flex flex-col\">\n        <app-poker-card\n          [content]=\"item.value\"\n          size=\"S\"\n          [disabled]=\"true\"\n          [private]=\"roomStore.countdown() !== 0\"\n          [active]=\"item.value !== null\"></app-poker-card>\n        <span class=\"text-center\">{{ item.key }}</span>\n      </div>\n    }\n  }\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "roomStore",
          "defaultValue": "inject(RoomStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [148]
        },
        {
          "name": "userStore",
          "defaultValue": "inject(UserStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "KeyValuePipe",
          "type": "pipe"
        },
        {
          "name": "PokerCardComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { KeyValuePipe } from '@angular/common';\nimport { PokerCardComponent } from '../poker-card/poker-card.component';\nimport { RoomStore, UserStore } from '@poker/data-models';\n\n@Component({\n  selector: 'app-poker-table',\n  standalone: true,\n  imports: [KeyValuePipe, PokerCardComponent],\n  template: `\n    <div class=\"flex gap-3 place-content-center\">\n      @for (item of roomStore.currentVotes() | keyvalue; track item.key) {\n        @if (item.key !== userStore.user()?.name) {\n          <div class=\"flex flex-col\">\n            <app-poker-card\n              [content]=\"item.value\"\n              size=\"S\"\n              [disabled]=\"true\"\n              [private]=\"roomStore.countdown() !== 0\"\n              [active]=\"item.value !== null\"></app-poker-card>\n            <span class=\"text-center\">{{ item.key }}</span>\n          </div>\n        }\n      }\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PokerTableComponent {\n  readonly roomStore = inject(RoomStore);\n  readonly userStore = inject(UserStore);\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "RoomComponent",
      "id": "component-RoomComponent-f031233f29a894f322f4bacbf8dc44bdd376f40670bb065948589c021c0432260cc4d66f5c941363062382fc02c53fd70b5a2f734638189a378f92796fe1682d",
      "file": "src/app/room/room.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "RoomStore"
        },
        {
          "name": "UserStore"
        }
      ],
      "selector": "app-room",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"p-4 h-svh flex flex-col\">\n  <div>\n    <div class=\"flex w-full justify-between\">\n      <a mat-stroked-button routerLink=\"/lobby\">\n        <mat-icon>home</mat-icon> Back to lobby\n      </a>\n\n      <div class=\"text-center\">\n        <h1>Room {{ roomName() }}</h1>\n        <h4>Current round: {{ roomStore.currentRoom().currentRound }}</h4>\n      </div>\n\n      <div class=\"flex gap-3\">\n        <button\n          mat-mini-fab\n          color=\"primary\"\n          matTooltip=\"User & players settings\"\n          aria-label=\"Button to open user & players settings\"\n          (click)=\"openBottomSheet('USER')\">\n          <mat-icon>manage_accounts</mat-icon>\n        </button>\n        <button\n          mat-mini-fab\n          color=\"primary\"\n          matTooltip=\"Open vote history\"\n          aria-label=\"Button to open vote history\"\n          (click)=\"openBottomSheet('HISTORY')\">\n          <mat-icon>history</mat-icon>\n        </button>\n        <button\n          mat-mini-fab\n          color=\"accent\"\n          matTooltip=\"Open sharing options\"\n          aria-label=\"Button to open sharing options\"\n          (click)=\"openBottomSheet('SHARE')\">\n          <mat-icon>ios_share</mat-icon>\n        </button>\n      </div>\n    </div>\n\n    @if (!roomStore.currentPlayers().length) {\n      <mat-card\n        tabindex=\"-1\"\n        class=\"fixed z-50 w-[calc(100%-2rem)] -translate-x-1/2 lg:max-w-7xl left-1/2 top-6\">\n        <mat-card-content class=\"bg-gray-100\">\n          <div class=\"flex flex-row justify-between items-center\">\n            <span>This room has no player yet</span>\n            <button\n              mat-flat-button\n              color=\"accent\"\n              (click)=\"openBottomSheet('SHARE')\">\n              <mat-icon>ios_share</mat-icon> Share it\n            </button>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    }\n    <app-room-timer [countdown]=\"roomStore.countdown()\"></app-room-timer>\n    <app-poker-table></app-poker-table>\n    @if (\n      userStore.user()?.role === UserRoleEnum.Player &&\n      roomStore.countdown() === 0\n    ) {\n      <div class=\"flex w-full justify-center mt-8\">\n        <button mat-fab extended color=\"primary\" (click)=\"nextRound()\">\n          <mat-icon>arrow_forward_ios</mat-icon> Next round\n        </button>\n      </div>\n    }\n  </div>\n  <div class=\"mt-auto\">\n    <app-user-deck></app-user-deck>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "bottomSheet",
          "defaultValue": "inject(MatBottomSheet)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 142,
          "modifierKind": [148]
        },
        {
          "name": "dialog",
          "defaultValue": "inject(MatDialog)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 141,
          "modifierKind": [148]
        },
        {
          "name": "roomName",
          "defaultValue": "input.required<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 138
        },
        {
          "name": "roomStore",
          "defaultValue": "inject(RoomStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 139,
          "modifierKind": [148]
        },
        {
          "name": "UserRoleEnum",
          "defaultValue": "UserRoleEnum",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 196,
          "modifierKind": [124, 148]
        },
        {
          "name": "userStore",
          "defaultValue": "inject(UserStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 140,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "nextRound",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 184,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 189,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:beforeunload'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "openBottomSheet",
          "args": [
            {
              "name": "sheetType",
              "type": "\"USER\" | \"SHARE\" | \"HISTORY\"",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 159,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "sheetType",
              "type": "\"USER\" | \"SHARE\" | \"HISTORY\"",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "openDialog",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 150,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "window:beforeunload",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 189
        }
      ],
      "standalone": true,
      "imports": [
        {
          "name": "JsonPipe",
          "type": "pipe"
        },
        {
          "name": "MatButton"
        },
        {
          "name": "MatAnchor"
        },
        {
          "name": "MatIcon"
        },
        {
          "name": "MatMiniFabButton"
        },
        {
          "name": "MatTooltip"
        },
        {
          "name": "MatCard"
        },
        {
          "name": "MatCardActions"
        },
        {
          "name": "MatCardContent"
        },
        {
          "name": "PokerCardComponent",
          "type": "component"
        },
        {
          "name": "KeyValuePipe",
          "type": "pipe"
        },
        {
          "name": "UserDeckComponent",
          "type": "component"
        },
        {
          "name": "PokerTableComponent",
          "type": "component"
        },
        {
          "name": "RoomTimerComponent",
          "type": "component"
        },
        {
          "name": "MatFabButton"
        },
        {
          "name": "RouterLink"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostListener,\n  inject,\n  input,\n  OnDestroy,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserCreationDialogComponent } from '../user/user-creation-dialog/user-creation-dialog.component';\nimport { RoomStore, UserRoleEnum, UserStore } from '@poker/data-models';\nimport { JsonPipe, KeyValuePipe } from '@angular/common';\nimport {\n  MatAnchor,\n  MatButton,\n  MatFabButton,\n  MatMiniFabButton,\n} from '@angular/material/button';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { UserSettingsComponent } from '../user/user-profile/user-settings.component';\nimport { ShareRoomComponent } from './share-room/share-room.component';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardContent,\n} from '@angular/material/card';\nimport { PokerCardComponent } from './poker-card/poker-card.component';\nimport { VoteHistoryComponent } from './vote-history/vote-history.component';\nimport { UserDeckComponent } from '../user/user-deck/user-deck.component';\nimport { PokerTableComponent } from './poker-table/poker-table.component';\nimport { RoomTimerComponent } from './room-timer/room-timer.component';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-room',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    JsonPipe,\n    MatButton,\n    MatAnchor,\n    MatIcon,\n    MatMiniFabButton,\n    MatTooltip,\n    MatCard,\n    MatCardActions,\n    MatCardContent,\n    PokerCardComponent,\n    KeyValuePipe,\n    UserDeckComponent,\n    PokerTableComponent,\n    RoomTimerComponent,\n    MatFabButton,\n    RouterLink,\n  ],\n  template: `\n    <div class=\"p-4 h-svh flex flex-col\">\n      <div>\n        <div class=\"flex w-full justify-between\">\n          <a mat-stroked-button routerLink=\"/lobby\">\n            <mat-icon>home</mat-icon> Back to lobby\n          </a>\n\n          <div class=\"text-center\">\n            <h1>Room {{ roomName() }}</h1>\n            <h4>Current round: {{ roomStore.currentRoom().currentRound }}</h4>\n          </div>\n\n          <div class=\"flex gap-3\">\n            <button\n              mat-mini-fab\n              color=\"primary\"\n              matTooltip=\"User & players settings\"\n              aria-label=\"Button to open user & players settings\"\n              (click)=\"openBottomSheet('USER')\">\n              <mat-icon>manage_accounts</mat-icon>\n            </button>\n            <button\n              mat-mini-fab\n              color=\"primary\"\n              matTooltip=\"Open vote history\"\n              aria-label=\"Button to open vote history\"\n              (click)=\"openBottomSheet('HISTORY')\">\n              <mat-icon>history</mat-icon>\n            </button>\n            <button\n              mat-mini-fab\n              color=\"accent\"\n              matTooltip=\"Open sharing options\"\n              aria-label=\"Button to open sharing options\"\n              (click)=\"openBottomSheet('SHARE')\">\n              <mat-icon>ios_share</mat-icon>\n            </button>\n          </div>\n        </div>\n\n        @if (!roomStore.currentPlayers().length) {\n          <mat-card\n            tabindex=\"-1\"\n            class=\"fixed z-50 w-[calc(100%-2rem)] -translate-x-1/2 lg:max-w-7xl left-1/2 top-6\">\n            <mat-card-content class=\"bg-gray-100\">\n              <div class=\"flex flex-row justify-between items-center\">\n                <span>This room has no player yet</span>\n                <button\n                  mat-flat-button\n                  color=\"accent\"\n                  (click)=\"openBottomSheet('SHARE')\">\n                  <mat-icon>ios_share</mat-icon> Share it\n                </button>\n              </div>\n            </mat-card-content>\n          </mat-card>\n        }\n        <app-room-timer [countdown]=\"roomStore.countdown()\"></app-room-timer>\n        <app-poker-table></app-poker-table>\n        @if (\n          userStore.user()?.role === UserRoleEnum.Player &&\n          roomStore.countdown() === 0\n        ) {\n          <div class=\"flex w-full justify-center mt-8\">\n            <button mat-fab extended color=\"primary\" (click)=\"nextRound()\">\n              <mat-icon>arrow_forward_ios</mat-icon> Next round\n            </button>\n          </div>\n        }\n      </div>\n      <div class=\"mt-auto\">\n        <app-user-deck></app-user-deck>\n      </div>\n    </div>\n  `,\n  styles: ``,\n  providers: [RoomStore, UserStore],\n})\nexport class RoomComponent implements OnDestroy {\n  roomName = input.required<string>();\n  readonly roomStore = inject(RoomStore);\n  readonly userStore = inject(UserStore);\n  readonly dialog = inject(MatDialog);\n  readonly bottomSheet = inject(MatBottomSheet);\n\n  constructor() {\n    this.roomStore.getOne(this.roomName);\n    this.openDialog();\n    this.roomStore.stopCountdown();\n  }\n\n  openDialog(): void {\n    this.dialog.open(UserCreationDialogComponent, {\n      disableClose: true,\n      data: { roomStore: this.roomStore, userStore: this.userStore },\n      maxHeight: '80vh',\n      panelClass: 'w-full',\n    });\n  }\n\n  openBottomSheet(sheetType: 'USER' | 'SHARE' | 'HISTORY') {\n    const panelClass = ['h-4/5'];\n    if (sheetType == 'USER') {\n      this.bottomSheet.open(UserSettingsComponent, {\n        data: { roomStore: this.roomStore, userStore: this.userStore },\n        panelClass,\n      });\n      return;\n    }\n    if (sheetType == 'SHARE') {\n      this.bottomSheet.open(ShareRoomComponent, {\n        data: this.roomName,\n        panelClass,\n      });\n      return;\n    }\n    if (sheetType == 'HISTORY') {\n      this.bottomSheet.open(VoteHistoryComponent, {\n        data: this.roomStore,\n        panelClass,\n      });\n      return;\n    }\n  }\n\n  nextRound() {\n    this.roomStore.incrementRound();\n  }\n\n  @HostListener('window:beforeunload')\n  ngOnDestroy() {\n    const user = this.userStore.user();\n    if (user?.role == UserRoleEnum.Player) {\n      this.roomStore.removePlayerFromRoom(user.name);\n    }\n  }\n\n  protected readonly UserRoleEnum = UserRoleEnum;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 142
      },
      "extends": [],
      "implements": ["OnDestroy"]
    },
    {
      "name": "RoomListDialogComponent",
      "id": "component-RoomListDialogComponent-d96e6f0fe3c82be01b18b4d417669dce112ea3245c2b13e7e567213472c1ab6442138b1f50c6fd48c63adbdb8991d291443f09396e115af5a4380e250f9da54f",
      "file": "src/app/lobby/room-list-dialog/room-list-dialog.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-room-list-dialog",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"w-full p-3\">\n  <h2>Create a room</h2>\n  <form\n    [formGroup]=\"newRoomForm()\"\n    class=\"flex flex-row gap-4\"\n    (ngSubmit)=\"createRoom()\">\n    <mat-form-field class=\"grow\">\n      <input\n        type=\"text\"\n        formControlName=\"name\"\n        matInput\n        placeholder=\"Enter the name of the room\"\n        required />\n\n      @if (name && name.invalid && (name.dirty || name.touched)) {\n        @if (name.errors?.['required']) {\n          <mat-error> You must enter a value. </mat-error>\n        }\n        @if (name.errors?.['pattern']) {\n          <mat-error>\n            You must only use unaccented letter, number, underscore or dash\n            characters.\n          </mat-error>\n        }\n        @if (name.errors?.['forbiddenValue']) {\n          <mat-error>\n            Name cannot be an existing room.\n            <a\n              class=\"underline\"\n              routerLink=\"/room/{{ name.value }}\"\n              matDialogClose\n              >Join it</a\n            >\n            instead?\n          </mat-error>\n        }\n      }\n    </mat-form-field>\n    <button\n      mat-flat-button\n      color=\"accent\"\n      type=\"submit\"\n      [disabled]=\"!newRoomForm().valid\">\n      Create\n    </button>\n  </form>\n\n  <p>or</p>\n  <h2>Join an active room</h2>\n  <mat-nav-list>\n    @for (roomName of dialogData.availableRooms(); track roomName) {\n      <a mat-list-item routerLink=\"/room/{{ roomName }}\" matDialogClose>{{\n        roomName\n      }}</a>\n    }\n  </mat-nav-list>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dialogData",
          "defaultValue": "inject(MAT_DIALOG_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RoomStore",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [148]
        },
        {
          "name": "dialogRef",
          "defaultValue": "inject(MatDialogRef<RoomListDialogComponent>)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 104,
          "modifierKind": [148]
        },
        {
          "name": "newRoomForm",
          "defaultValue": "computed(() => {\n    return new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n        Validators.pattern(/^[-\\w]+$/),\n        forbiddenValuesValidator(this.dialogData.availableRooms()),\n      ]),\n    });\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 107
        },
        {
          "name": "router",
          "defaultValue": "inject(Router)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 105,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "createRoom",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "MatInput"
        },
        {
          "name": "MatButton"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        },
        {
          "name": "MatListModule",
          "type": "module"
        },
        {
          "name": "MatError"
        },
        {
          "name": "MatFormField"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "MatDialogClose"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n} from '@angular/core';\nimport { RoomStore } from '@poker/data-models';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogClose,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { MatError, MatFormField, MatInput } from '@angular/material/input';\nimport { forbiddenValuesValidator } from '@poker/utils';\nimport { MatButton } from '@angular/material/button';\nimport { JsonPipe } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { Router, RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-room-list-dialog',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    MatInput,\n    MatButton,\n    JsonPipe,\n    MatListModule,\n    MatError,\n    MatFormField,\n    RouterLink,\n    MatDialogClose,\n  ],\n  template: `\n    <div class=\"w-full p-3\">\n      <h2>Create a room</h2>\n      <form\n        [formGroup]=\"newRoomForm()\"\n        class=\"flex flex-row gap-4\"\n        (ngSubmit)=\"createRoom()\">\n        <mat-form-field class=\"grow\">\n          <input\n            type=\"text\"\n            formControlName=\"name\"\n            matInput\n            placeholder=\"Enter the name of the room\"\n            required />\n\n          @if (name && name.invalid && (name.dirty || name.touched)) {\n            @if (name.errors?.['required']) {\n              <mat-error> You must enter a value. </mat-error>\n            }\n            @if (name.errors?.['pattern']) {\n              <mat-error>\n                You must only use unaccented letter, number, underscore or dash\n                characters.\n              </mat-error>\n            }\n            @if (name.errors?.['forbiddenValue']) {\n              <mat-error>\n                Name cannot be an existing room.\n                <a\n                  class=\"underline\"\n                  routerLink=\"/room/{{ name.value }}\"\n                  matDialogClose\n                  >Join it</a\n                >\n                instead?\n              </mat-error>\n            }\n          }\n        </mat-form-field>\n        <button\n          mat-flat-button\n          color=\"accent\"\n          type=\"submit\"\n          [disabled]=\"!newRoomForm().valid\">\n          Create\n        </button>\n      </form>\n\n      <p>or</p>\n      <h2>Join an active room</h2>\n      <mat-nav-list>\n        @for (roomName of dialogData.availableRooms(); track roomName) {\n          <a mat-list-item routerLink=\"/room/{{ roomName }}\" matDialogClose>{{\n            roomName\n          }}</a>\n        }\n      </mat-nav-list>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoomListDialogComponent {\n  readonly dialogData: RoomStore = inject(MAT_DIALOG_DATA);\n  readonly dialogRef = inject(MatDialogRef<RoomListDialogComponent>);\n  readonly router = inject(Router);\n\n  newRoomForm = computed(() => {\n    return new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n        Validators.pattern(/^[-\\w]+$/),\n        forbiddenValuesValidator(this.dialogData.availableRooms()),\n      ]),\n    });\n  });\n\n  get name() {\n    return this.newRoomForm().get('name');\n  }\n\n  async createRoom() {\n    if (this.name?.value) {\n      await this.router.navigate(['room', this.name.value]);\n      this.dialogRef.close();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": [],
      "accessors": {
        "name": {
          "name": "name",
          "getSignature": {
            "name": "name",
            "type": "",
            "returnType": "",
            "line": 117
          }
        }
      }
    },
    {
      "name": "RoomTimerComponent",
      "id": "component-RoomTimerComponent-eea4be072a3c73cf37dd5c1d49d98b64716f4df20b5ef6777805621bd2b4ce5104f5052df4233b97c08cc9ea7b5e317a8073c10adfc17f3309c334a6f0b95e1c",
      "file": "src/app/room/room-timer/room-timer.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-room-timer",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"relative w-min\">\n  <mat-progress-spinner\n    [color]=\"timerColor()\"\n    mode=\"determinate\"\n    [value]=\"timerValue()\">\n    test\n  </mat-progress-spinner>\n  @if (countdown()) {\n    <div\n      class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-4xl\">\n      {{ countdown() }}\n    </div>\n  }\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "countdown",
          "defaultValue": "input.required<number | null>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "timerColor",
          "defaultValue": "computed(() =>\n    this.timerValue() < 40 ? 'warn' : 'accent'\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<string>",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "timerValue",
          "defaultValue": "computed(\n    () => ((this.countdown() || 0) / environment.defaultCountdown) * 100\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<number>",
          "optional": false,
          "description": "",
          "line": 38
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatProgressSpinner"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  input,\n  Signal,\n} from '@angular/core';\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\nimport { environment } from '../../../environments/environment';\nimport { JsonPipe } from '@angular/common';\n\n@Component({\n  selector: 'app-room-timer',\n  standalone: true,\n  imports: [MatProgressSpinner, JsonPipe],\n  template: `\n    <div class=\"relative w-min\">\n      <mat-progress-spinner\n        [color]=\"timerColor()\"\n        mode=\"determinate\"\n        [value]=\"timerValue()\">\n        test\n      </mat-progress-spinner>\n      @if (countdown()) {\n        <div\n          class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-4xl\">\n          {{ countdown() }}\n        </div>\n      }\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoomTimerComponent {\n  countdown = input.required<number | null>(); // InputSignal<string>\n\n  timerValue: Signal<number> = computed(\n    () => ((this.countdown() || 0) / environment.defaultCountdown) * 100\n  );\n  timerColor: Signal<string> = computed(() =>\n    this.timerValue() < 40 ? 'warn' : 'accent'\n  );\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "ShareRoomComponent",
      "id": "component-ShareRoomComponent-e5cebfe8c2dc62d36d239e51bca6b55c5a32e175f0b5af336cec6d47b35d80a0d4bb130bf324c32f7160c6a455ea1dee91c44df5dc31ea173b4981fd3d922e4e",
      "file": "src/app/room/share-room/share-room.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-share-room",
      "styleUrls": [],
      "styles": [""],
      "template": "<div>\n  <h1>Give access to room {{ sheetData() }} to your coworkers</h1>\n  <p>Share the link</p>\n  <mat-form-field class=\"w-full\">\n    <span matTextPrefix>URL &nbsp;</span>\n    <input\n      matInput\n      type=\"text\"\n      value=\"{{ document.location.href }}\"\n      readonly\n      disabled />\n    <button\n      matSuffix\n      mat-icon-button\n      aria-label=\"Copy link\"\n      matTooltip=\"Copy link\"\n      color=\"primary\"\n      (click)=\"changeCopyIcon()\"\n      [cdkCopyToClipboard]=\"document.location.href\">\n      <mat-icon>{{ copyIcon() }}</mat-icon>\n    </button>\n  </mat-form-field>\n  <p>or Share the QRCode</p>\n  <qrcode\n    class=\"flex justify-center\"\n    [width]=\"300\"\n    [qrdata]=\"document.location.href\"\n    [errorCorrectionLevel]=\"'L'\"></qrcode>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "copyIcon",
          "defaultValue": "signal('content_copy')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "WritableSignal<string>",
          "optional": false,
          "description": "",
          "line": 75,
          "modifierKind": [148]
        },
        {
          "name": "document",
          "defaultValue": "inject(DOCUMENT)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [148]
        },
        {
          "name": "location",
          "defaultValue": "location",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 85,
          "modifierKind": [124, 148]
        },
        {
          "name": "sheetData",
          "defaultValue": "inject(MAT_BOTTOM_SHEET_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<string>",
          "optional": false,
          "description": "",
          "line": 74,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "changeCopyIcon",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatTooltip"
        },
        {
          "name": "MatIcon"
        },
        {
          "name": "CdkCopyToClipboard"
        },
        {
          "name": "MatLabel"
        },
        {
          "name": "MatFormField"
        },
        {
          "name": "MatIconButton"
        },
        {
          "name": "MatPrefix"
        },
        {
          "name": "MatSuffix"
        },
        {
          "name": "MatInput"
        },
        {
          "name": "QRCodeModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  signal,\n  Signal,\n  WritableSignal,\n} from '@angular/core';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIcon } from '@angular/material/icon';\nimport { DOCUMENT } from '@angular/common';\nimport { CdkCopyToClipboard } from '@angular/cdk/clipboard';\nimport {\n  MatFormField,\n  MatLabel,\n  MatPrefix,\n  MatSuffix,\n} from '@angular/material/form-field';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatInput } from '@angular/material/input';\nimport { QRCodeModule } from 'angularx-qrcode';\n\n@Component({\n  selector: 'app-share-room',\n  standalone: true,\n  imports: [\n    MatTooltip,\n    MatIcon,\n    CdkCopyToClipboard,\n    MatLabel,\n    MatFormField,\n    MatIconButton,\n    MatPrefix,\n    MatSuffix,\n    MatInput,\n    QRCodeModule,\n  ],\n  template: `\n    <div>\n      <h1>Give access to room {{ sheetData() }} to your coworkers</h1>\n      <p>Share the link</p>\n      <mat-form-field class=\"w-full\">\n        <span matTextPrefix>URL &nbsp;</span>\n        <input\n          matInput\n          type=\"text\"\n          value=\"{{ document.location.href }}\"\n          readonly\n          disabled />\n        <button\n          matSuffix\n          mat-icon-button\n          aria-label=\"Copy link\"\n          matTooltip=\"Copy link\"\n          color=\"primary\"\n          (click)=\"changeCopyIcon()\"\n          [cdkCopyToClipboard]=\"document.location.href\">\n          <mat-icon>{{ copyIcon() }}</mat-icon>\n        </button>\n      </mat-form-field>\n      <p>or Share the QRCode</p>\n      <qrcode\n        class=\"flex justify-center\"\n        [width]=\"300\"\n        [qrdata]=\"document.location.href\"\n        [errorCorrectionLevel]=\"'L'\"></qrcode>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShareRoomComponent {\n  readonly sheetData: Signal<string> = inject(MAT_BOTTOM_SHEET_DATA);\n  readonly copyIcon: WritableSignal<string> = signal('content_copy');\n  readonly document = inject(DOCUMENT);\n\n  changeCopyIcon() {\n    this.copyIcon.set('done');\n    setTimeout(() => {\n      this.copyIcon.set('content_copy');\n    }, 1000);\n  }\n\n  protected readonly location = location;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "UserCreationDialogComponent",
      "id": "component-UserCreationDialogComponent-f3b17447a4e46783befe54dd2008d4365b5253abacfd33e30c91f8d73f1995a300e1de5d6f1c48c3ed61b09388c77f5ca7b128085f8618951e090f2eaeb64414",
      "file": "src/app/user/user-creation-dialog/user-creation-dialog.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-user-creation-dialog",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"w-full p-3\">\n  <h2>Welcome</h2>\n  <form\n    [formGroup]=\"newUserForm()\"\n    class=\"flex flex-col gap-2\"\n    (ngSubmit)=\"joinRoom()\">\n    <mat-form-field>\n      <input\n        type=\"text\"\n        formControlName=\"name\"\n        matInput\n        placeholder=\"Enter your name\"\n        required />\n\n      @if (name && name.invalid && (name.dirty || name.touched)) {\n        @if (name.errors?.['required']) {\n          <mat-error> You must enter a value. </mat-error>\n        }\n        @if (name.errors?.['pattern']) {\n          <mat-error>\n            You must only use unaccented letter, number, underscore or dash\n            characters.\n          </mat-error>\n        }\n      }\n    </mat-form-field>\n\n    <mat-radio-group formControlName=\"role\" required>\n      <mat-label>Your role</mat-label>\n      @for (role of UserRoleEnumChoices; track role) {\n        <mat-radio-button [value]=\"role\">{{\n          UserRoleEnum[role]\n        }}</mat-radio-button>\n      }\n    </mat-radio-group>\n    @if (newUserForm().errors?.['forbiddenValue']) {\n      <mat-error>\n        There is already a Player with that name, change your role if that's\n        you, else change your name\n      </mat-error>\n    }\n\n    <button\n      mat-flat-button\n      color=\"accent\"\n      type=\"submit\"\n      [disabled]=\"!newUserForm().valid\">\n      Join\n    </button>\n  </form>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dialogData",
          "defaultValue": "inject(MAT_DIALOG_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [148]
        },
        {
          "name": "dialogRef",
          "defaultValue": "inject(MatDialogRef<UserCreationDialogComponent>)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [148]
        },
        {
          "name": "newUserForm",
          "defaultValue": "computed(() => {\n    return new FormGroup(\n      {\n        name: new FormControl(this.dialogData.userStore.user()?.name || '', [\n          Validators.required,\n          Validators.pattern(/^[-\\w]+$/),\n        ]),\n        role: new FormControl(\n          this.dialogData.userStore.user()?.role || UserRoleEnum.Player,\n          [Validators.required]\n        ),\n      },\n      {\n        validators: [\n          this.observerWithPlayerName(\n            this.dialogData.roomStore.currentPlayers()\n          ),\n        ],\n      }\n    );\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 105
        },
        {
          "name": "UserRoleEnum",
          "defaultValue": "UserRoleEnum",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 166,
          "modifierKind": [124, 148]
        },
        {
          "name": "UserRoleEnumChoices",
          "defaultValue": "UserRoleEnumChoices",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 167,
          "modifierKind": [124, 148]
        }
      ],
      "methodsClass": [
        {
          "name": "joinRoom",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 150,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "observerWithPlayerName",
          "args": [
            {
              "name": "forbiddenValues",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "ValidatorFn",
          "typeParameters": [],
          "line": 135,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "forbiddenValues",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatButton"
        },
        {
          "name": "MatError"
        },
        {
          "name": "MatFormField"
        },
        {
          "name": "MatInput"
        },
        {
          "name": "MatLabel"
        },
        {
          "name": "ReactiveFormsModule",
          "type": "module"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        },
        {
          "name": "MatRadioButton"
        },
        {
          "name": "MatRadioGroup"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n} from '@angular/core';\nimport {\n  RoomStore,\n  UserRoleEnum,\n  UserRoleEnumChoices,\n  UserStore,\n} from '@poker/data-models';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatError, MatFormField, MatLabel } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { forbiddenValuesValidator } from '@poker/utils';\nimport { JsonPipe } from '@angular/common';\nimport { MatRadioButton, MatRadioGroup } from '@angular/material/radio';\n\n@Component({\n  selector: 'app-user-creation-dialog',\n  standalone: true,\n  imports: [\n    MatButton,\n    MatError,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    ReactiveFormsModule,\n    JsonPipe,\n    MatRadioButton,\n    MatRadioGroup,\n  ],\n  template: `\n    <div class=\"w-full p-3\">\n      <h2>Welcome</h2>\n      <form\n        [formGroup]=\"newUserForm()\"\n        class=\"flex flex-col gap-2\"\n        (ngSubmit)=\"joinRoom()\">\n        <mat-form-field>\n          <input\n            type=\"text\"\n            formControlName=\"name\"\n            matInput\n            placeholder=\"Enter your name\"\n            required />\n\n          @if (name && name.invalid && (name.dirty || name.touched)) {\n            @if (name.errors?.['required']) {\n              <mat-error> You must enter a value. </mat-error>\n            }\n            @if (name.errors?.['pattern']) {\n              <mat-error>\n                You must only use unaccented letter, number, underscore or dash\n                characters.\n              </mat-error>\n            }\n          }\n        </mat-form-field>\n\n        <mat-radio-group formControlName=\"role\" required>\n          <mat-label>Your role</mat-label>\n          @for (role of UserRoleEnumChoices; track role) {\n            <mat-radio-button [value]=\"role\">{{\n              UserRoleEnum[role]\n            }}</mat-radio-button>\n          }\n        </mat-radio-group>\n        @if (newUserForm().errors?.['forbiddenValue']) {\n          <mat-error>\n            There is already a Player with that name, change your role if that's\n            you, else change your name\n          </mat-error>\n        }\n\n        <button\n          mat-flat-button\n          color=\"accent\"\n          type=\"submit\"\n          [disabled]=\"!newUserForm().valid\">\n          Join\n        </button>\n      </form>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserCreationDialogComponent {\n  readonly dialogData: { roomStore: RoomStore; userStore: UserStore } =\n    inject(MAT_DIALOG_DATA);\n  readonly dialogRef = inject(MatDialogRef<UserCreationDialogComponent>);\n\n  newUserForm = computed(() => {\n    return new FormGroup(\n      {\n        name: new FormControl(this.dialogData.userStore.user()?.name || '', [\n          Validators.required,\n          Validators.pattern(/^[-\\w]+$/),\n        ]),\n        role: new FormControl(\n          this.dialogData.userStore.user()?.role || UserRoleEnum.Player,\n          [Validators.required]\n        ),\n      },\n      {\n        validators: [\n          this.observerWithPlayerName(\n            this.dialogData.roomStore.currentPlayers()\n          ),\n        ],\n      }\n    );\n  });\n\n  get name() {\n    return this.newUserForm().get('name');\n  }\n\n  get role() {\n    return this.newUserForm().get('role');\n  }\n\n  observerWithPlayerName(forbiddenValues: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const name = control.get('name');\n      const role = control.get('role');\n\n      return (\n        (role &&\n          name &&\n          role.value === UserRoleEnum.Observer &&\n          forbiddenValuesValidator(forbiddenValues)(name)) ||\n        null\n      );\n    };\n  }\n\n  joinRoom(): void {\n    if (this.name?.value && this.role?.value != null) {\n      this.dialogData.userStore.setUser({\n        name: this.name.value,\n        role: this.role.value,\n      });\n      if ((this.role.value as UserRoleEnum) == UserRoleEnum.Player) {\n        this.dialogData.roomStore.addPlayerToRoom(this.name.value, () =>\n          this.dialogRef.close()\n        );\n      } else {\n        this.dialogRef.close();\n      }\n    }\n  }\n\n  protected readonly UserRoleEnum = UserRoleEnum;\n  protected readonly UserRoleEnumChoices = UserRoleEnumChoices;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": [],
      "accessors": {
        "name": {
          "name": "name",
          "getSignature": {
            "name": "name",
            "type": "",
            "returnType": "",
            "line": 127
          }
        },
        "role": {
          "name": "role",
          "getSignature": {
            "name": "role",
            "type": "",
            "returnType": "",
            "line": 131
          }
        }
      }
    },
    {
      "name": "UserDeckComponent",
      "id": "component-UserDeckComponent-493313d07fce3c7653dcf7465b6d687c039b6d3ad9f4ffb85fd1edd45b3f002242acd0cde409c04ee1b3990b062dfb384e83114b049ecff92432e6018e8e5f68",
      "file": "src/app/user/user-deck/user-deck.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-user-deck",
      "styleUrls": [],
      "styles": [""],
      "template": "<h3 class=\"text-center font-bold !mb-0\">{{ userStore.user()?.name }}</h3>\n@if (userStore.user()?.role === UserRoleEnum.Observer) {\n  <div>\n    <h4 class=\"text-center font-bold\">\n      You are in\n      <mat-icon class=\"align-middle\">visibility</mat-icon> observer mode\n    </h4>\n    <p class=\"text-center caption font-thin\">\n      Reload page to change your role\n    </p>\n  </div>\n} @else if (userStore.user()?.role === UserRoleEnum.Player) {\n  <div class=\"flex gap-1 place-content-center\">\n    @for (voteOption of voteChoices; track voteOption) {\n      <app-poker-card\n        [content]=\"voteOption\"\n        size=\"L\"\n        [class]=\"\n          voteOption === userVote()\n            ? ['pb-2', 'pt-0']\n            : roomStore.countdown() === 0\n              ? ['pt-2']\n              : ['hover:pb-2', 'hover:pt-0', 'pt-2']\n        \"\n        [disabled]=\"roomStore.countdown() === 0\"\n        [active]=\"voteOption === userVote()\"\n        (click)=\"vote(voteOption)\"></app-poker-card>\n    }\n  </div>\n}\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "roomStore",
          "defaultValue": "inject(RoomStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [148]
        },
        {
          "name": "UserRoleEnum",
          "defaultValue": "UserRoleEnum",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [124, 148]
        },
        {
          "name": "userStore",
          "defaultValue": "inject(UserStore)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [148]
        },
        {
          "name": "userVote",
          "defaultValue": "computed(() => {\n    const user = this.userStore.user();\n    if (user !== null) {\n      return this.roomStore.currentVotes()[user.name];\n    }\n    return null;\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Signal<VoteChoice | null>",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [148]
        },
        {
          "name": "voteChoices",
          "defaultValue": "voteChoices",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [124, 148]
        }
      ],
      "methodsClass": [
        {
          "name": "vote",
          "args": [
            {
              "name": "voteOption",
              "type": "VoteChoice",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "voteOption",
              "type": "VoteChoice",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatIcon"
        },
        {
          "name": "PokerCardComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  Signal,\n} from '@angular/core';\nimport {\n  RoomStore,\n  UserRoleEnum,\n  UserStore,\n  VoteChoice,\n  voteChoices,\n} from '@poker/data-models';\nimport { MatIcon } from '@angular/material/icon';\nimport { PokerCardComponent } from '../../room/poker-card/poker-card.component';\n\n@Component({\n  selector: 'app-user-deck',\n  standalone: true,\n  imports: [MatIcon, PokerCardComponent],\n  template: `\n    <h3 class=\"text-center font-bold !mb-0\">{{ userStore.user()?.name }}</h3>\n    @if (userStore.user()?.role === UserRoleEnum.Observer) {\n      <div>\n        <h4 class=\"text-center font-bold\">\n          You are in\n          <mat-icon class=\"align-middle\">visibility</mat-icon> observer mode\n        </h4>\n        <p class=\"text-center caption font-thin\">\n          Reload page to change your role\n        </p>\n      </div>\n    } @else if (userStore.user()?.role === UserRoleEnum.Player) {\n      <div class=\"flex gap-1 place-content-center\">\n        @for (voteOption of voteChoices; track voteOption) {\n          <app-poker-card\n            [content]=\"voteOption\"\n            size=\"L\"\n            [class]=\"\n              voteOption === userVote()\n                ? ['pb-2', 'pt-0']\n                : roomStore.countdown() === 0\n                  ? ['pt-2']\n                  : ['hover:pb-2', 'hover:pt-0', 'pt-2']\n            \"\n            [disabled]=\"roomStore.countdown() === 0\"\n            [active]=\"voteOption === userVote()\"\n            (click)=\"vote(voteOption)\"></app-poker-card>\n        }\n      </div>\n    }\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserDeckComponent {\n  readonly roomStore = inject(RoomStore);\n  readonly userStore = inject(UserStore);\n  protected readonly UserRoleEnum = UserRoleEnum;\n  protected readonly voteChoices = voteChoices;\n\n  readonly userVote: Signal<VoteChoice | null> = computed(() => {\n    const user = this.userStore.user();\n    if (user !== null) {\n      return this.roomStore.currentVotes()[user.name];\n    }\n    return null;\n  });\n\n  vote(voteOption: VoteChoice) {\n    this.roomStore.vote(this.userStore.user(), voteOption);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "UserSettingsComponent",
      "id": "component-UserSettingsComponent-870e85500e68b18d15de80d52d201c17ff7f6da96b1446bb12780b0d99229e8f1d7eb47c8d267ccaa04ba12a654ed5d15919e37d728f82f0eb0f15ce677c3d5d",
      "file": "src/app/user/user-profile/user-settings.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-user-profile",
      "styleUrls": [],
      "styles": [""],
      "template": "<div class=\"text-center flex flex-col justify-between h-full\">\n  <h2>\n    You are user <strong>{{ sheetData.userStore.user()?.name }}</strong>\n  </h2>\n  <h2>\n    You have the role\n    <strong>\n      <mat-icon class=\"align-middle\">{{ roleIcon }}</mat-icon>\n      {{ sheetData.userStore.userDisplayRole() }}</strong\n    >\n  </h2>\n  <mat-divider></mat-divider>\n  <div>\n    <h3 class=\"mt-4\">Other players debug</h3>\n    <mat-action-list>\n      @for (\n        playerName of sheetData.roomStore.currentPlayers();\n        track playerName\n      ) {\n        @if (playerName !== sheetData.userStore.user()?.name) {\n          <button\n            mat-list-item\n            (click)=\"deletePlayer(playerName)\"\n            [attr.aria-label]=\"'Button to delete player ' + playerName\">\n            <mat-icon matListItemIcon>delete</mat-icon>\n            <div matListItemTitle>{{ playerName }}</div>\n          </button>\n        }\n      }\n    </mat-action-list>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "roleIcon",
          "defaultValue": "this.sheetData.userStore.user()?.role == UserRoleEnum.Observer\n      ? 'visibility'\n      : 'videogame_asset'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 69,
          "modifierKind": [148]
        },
        {
          "name": "sheetData",
          "defaultValue": "inject(\n    MAT_BOTTOM_SHEET_DATA\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 66,
          "modifierKind": [148]
        },
        {
          "name": "UserRoleEnum",
          "defaultValue": "UserRoleEnum",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [124, 148]
        }
      ],
      "methodsClass": [
        {
          "name": "deletePlayer",
          "args": [
            {
              "name": "playerName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "playerName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatIcon"
        },
        {
          "name": "MatActionList"
        },
        {
          "name": "MatListItem"
        },
        {
          "name": "MatDialogClose"
        },
        {
          "name": "MatListItemIcon"
        },
        {
          "name": "MatListItemTitle"
        },
        {
          "name": "RouterLink"
        },
        {
          "name": "MatDivider"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { RoomStore, UserRoleEnum, UserStore } from '@poker/data-models';\nimport { MatIcon } from '@angular/material/icon';\nimport {\n  MatActionList,\n  MatListItem,\n  MatListItemIcon,\n  MatListItemTitle,\n} from '@angular/material/list';\nimport { MatDialogClose } from '@angular/material/dialog';\nimport { RouterLink } from '@angular/router';\nimport { MatDivider } from '@angular/material/divider';\n\n@Component({\n  selector: 'app-user-profile',\n  standalone: true,\n  template: `\n    <div class=\"text-center flex flex-col justify-between h-full\">\n      <h2>\n        You are user <strong>{{ sheetData.userStore.user()?.name }}</strong>\n      </h2>\n      <h2>\n        You have the role\n        <strong>\n          <mat-icon class=\"align-middle\">{{ roleIcon }}</mat-icon>\n          {{ sheetData.userStore.userDisplayRole() }}</strong\n        >\n      </h2>\n      <mat-divider></mat-divider>\n      <div>\n        <h3 class=\"mt-4\">Other players debug</h3>\n        <mat-action-list>\n          @for (\n            playerName of sheetData.roomStore.currentPlayers();\n            track playerName\n          ) {\n            @if (playerName !== sheetData.userStore.user()?.name) {\n              <button\n                mat-list-item\n                (click)=\"deletePlayer(playerName)\"\n                [attr.aria-label]=\"'Button to delete player ' + playerName\">\n                <mat-icon matListItemIcon>delete</mat-icon>\n                <div matListItemTitle>{{ playerName }}</div>\n              </button>\n            }\n          }\n        </mat-action-list>\n      </div>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    MatIcon,\n    MatActionList,\n    MatListItem,\n    MatDialogClose,\n    MatListItemIcon,\n    MatListItemTitle,\n    RouterLink,\n    MatDivider,\n  ],\n})\nexport class UserSettingsComponent {\n  readonly sheetData: { roomStore: RoomStore; userStore: UserStore } = inject(\n    MAT_BOTTOM_SHEET_DATA\n  );\n  readonly roleIcon =\n    this.sheetData.userStore.user()?.role == UserRoleEnum.Observer\n      ? 'visibility'\n      : 'videogame_asset';\n  protected readonly UserRoleEnum = UserRoleEnum;\n\n  deletePlayer(playerName: string) {\n    this.sheetData.roomStore.removePlayerFromRoom(playerName);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    },
    {
      "name": "VoteHistoryComponent",
      "id": "component-VoteHistoryComponent-ed2b50bab009965b3be9b38ec6670d3ef38bffcf8f3585c27c827e5fb6ab753a0b4c80bf38ce2ab229585beba318d7b3828f15aae7ff0f13450f252eb612b595",
      "file": "src/app/room/vote-history/vote-history.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-vote-history",
      "styleUrls": [],
      "styles": [""],
      "template": "<div>\n  <h1>History of the votes</h1>\n  <mat-list>\n    @for (\n      roundItem of sheetData.historyVotes() | keyvalue;\n      track roundItem.key\n    ) {\n      <mat-list-item>\n        <span matListItemTitle>Round {{ roundItem.key }}</span>\n        @for (voteItem of roundItem.value | keyvalue; track voteItem.key) {\n          <span matListItemLine\n            >{{ voteItem.key }}: {{ voteItem.value }}</span\n          >\n        }\n      </mat-list-item>\n    }\n  </mat-list>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "sheetData",
          "defaultValue": "inject(MAT_BOTTOM_SHEET_DATA)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RoomStore",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [148]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "MatListModule",
          "type": "module"
        },
        {
          "name": "KeyValuePipe",
          "type": "pipe"
        },
        {
          "name": "PokerCardComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { RoomStore } from '@poker/data-models';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { MatListModule } from '@angular/material/list';\nimport { KeyValuePipe } from '@angular/common';\nimport { PokerCardComponent } from '../poker-card/poker-card.component';\n\n@Component({\n  selector: 'app-vote-history',\n  standalone: true,\n  imports: [MatListModule, KeyValuePipe, PokerCardComponent],\n  template: `\n    <div>\n      <h1>History of the votes</h1>\n      <mat-list>\n        @for (\n          roundItem of sheetData.historyVotes() | keyvalue;\n          track roundItem.key\n        ) {\n          <mat-list-item>\n            <span matListItemTitle>Round {{ roundItem.key }}</span>\n            @for (voteItem of roundItem.value | keyvalue; track voteItem.key) {\n              <span matListItemLine\n                >{{ voteItem.key }}: {{ voteItem.value }}</span\n              >\n            }\n          </mat-list-item>\n        }\n      </mat-list>\n    </div>\n  `,\n  styles: ``,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VoteHistoryComponent {\n  readonly sheetData: RoomStore = inject(MAT_BOTTOM_SHEET_DATA);\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n",
      "extends": []
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "appConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ApplicationConfig",
        "defaultValue": "{\n  providers: [\n    provideRouter(routes, withComponentInputBinding()),\n    { provide: TitleStrategy, useClass: TemplatePageTitleStrategy },\n    provideAnimationsAsync(),\n    importProvidersFrom(MqttModule.forRoot(environment.mqttConfigOptions)),\n  ],\n}"
      },
      {
        "name": "connection",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ConnectResponse | undefined"
      },
      {
        "name": "currentActionNames",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new Set<string>()"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/poker-card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  // waiting for https://github.com/storybookjs/storybook/issues/25784 to remove ts annotation\n  args: {\n    // @ts-expect-error waiting for storybook support of angular input signal\n    content: 'Test',\n    // @ts-expect-error waiting for storybook support of angular input signal\n    size: 'S',\n    // @ts-expect-error waiting for storybook support of angular input signal\n    disabled: false,\n    // @ts-expect-error waiting for storybook support of angular input signal\n    private: false,\n    // @ts-expect-error waiting for storybook support of angular input signal\n    active: false,\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.production.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "EnvironmentConfig",
        "defaultValue": "{\n  appVersion: '#RELEASE_VERSION',\n  production: false,\n  env: 'production',\n\n  defaultCountdown: 3,\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: '#MQTT_HOST',\n    username: '#MQTT_USER',\n    password: '#MQTT_PWD',\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.staging.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "EnvironmentConfig",
        "defaultValue": "{\n  appVersion: '#RELEASE_VERSION',\n  production: true,\n  env: 'staging',\n\n  defaultCountdown: 3,\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: '#MQTT_HOST',\n    username: '#MQTT_USER',\n    password: '#MQTT_PWD',\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "EnvironmentConfig",
        "defaultValue": "{\n  appVersion: 'dev',\n  production: false,\n  env: 'dev',\n\n  defaultCountdown: 3,\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: 'localhost',\n    username: 'user',\n    password: 'password',\n  },\n}"
      },
      {
        "name": "ENVIRONMENT_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment-type.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken('ENVIRONMENT_CONFIG')"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/user/user.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "UserState",
        "defaultValue": "{\n  user: null,\n}"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/room/room.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "RoomState",
        "defaultValue": "{\n  currentRoom: roomDefault,\n  availableRooms: [],\n  countdown: null,\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/poker-card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<PokerCardComponent>",
        "defaultValue": "{\n  title: 'PokerCard',\n  component: PokerCardComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    content: { type: 'string' },\n    size: { type: { name: 'enum', value: ['S', 'L'] } },\n    disabled: { type: 'boolean' },\n    private: { type: 'boolean' },\n    active: { type: 'boolean' },\n  },\n}"
      },
      {
        "name": "mqttDefaults",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment-type.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "IMqttServiceOptions",
        "defaultValue": "{\n  port: 8080,\n  path: '/mqtt',\n  protocolVersion: 5,\n}"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": ".storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
      },
      {
        "name": "resolvedRoomTitle",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.routes.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "ResolveFn<string>",
        "defaultValue": "(route: ActivatedRouteSnapshot) =>\n  `Room ${route.paramMap.get('roomName')}`"
      },
      {
        "name": "roomDefault",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/room/room.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "{\n  currentRound: 0,\n  votePerRoundPerPlayer: { 0: {} },\n  name: '',\n} as RoomModel"
      },
      {
        "name": "RoomStore",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/room/room.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "signalStore(\n  withDevtools('rooms'),\n  withState<RoomState>(initialState),\n  withComputed(({ currentRoom }) => ({\n    currentVotes: computed(\n      () => currentRoom.votePerRoundPerPlayer()[currentRoom.currentRound()]\n    ),\n    historyVotes: computed(() => {\n      return Object.fromEntries(\n        Object.entries(currentRoom.votePerRoundPerPlayer()).filter(\n          ([round]) => Number(round) != currentRoom.currentRound()\n        )\n      );\n    }),\n    currentPlayers: computed(() =>\n      Object.keys(\n        currentRoom.votePerRoundPerPlayer()[currentRoom.currentRound()]\n      )\n    ),\n  })),\n  withMethods((store, roomService = inject(RoomService)) => {\n    const launchCountdown = rxMethod<number | null>(\n      switchMap(countdownSeconds => {\n        console.debug('launchCountdown', countdownSeconds);\n        if (countdownSeconds === null) {\n          return EMPTY;\n        }\n        return timer(0, 1000).pipe(\n          scan(acc => --acc, countdownSeconds + 1),\n          take(countdownSeconds + 1),\n          tap(countdown => {\n            console.debug('countdown', countdown);\n            patchState(store, () => ({\n              countdown,\n            }));\n          })\n        );\n      })\n    );\n    const stopCountdown = rxMethod<void>(\n      switchMap(() => {\n        // workaround to make countdown stop instead of using launchCountdown.unsubscribe\n        // because it seems to prevent countdown from being started ever again afterward\n        launchCountdown(null);\n        // no idea why this is necessary instead of synchronously calling patchState...\n        return timer(0, 1000).pipe(\n          take(1),\n          tap(() =>\n            patchState(store, () => ({\n              countdown: null,\n            }))\n          )\n        );\n      })\n    );\n\n    function getCurrentRound(name: string) {\n      console.debug('getCurrentRound', name);\n      return roomService.getCurrentRound(name).pipe(\n        tapResponse({\n          next: (currentRound: number) => {\n            console.debug('service getCurrentRound', name, currentRound);\n            patchState(store, state => {\n              if (state.currentRoom.currentRound !== currentRound) {\n                const currentPlayers = Object.keys(\n                  state.currentRoom.votePerRoundPerPlayer[\n                    state.currentRoom.currentRound\n                  ]\n                );\n                // update round, clone player\n                return {\n                  countdown: null,\n                  currentRoom: {\n                    ...state.currentRoom,\n                    currentRound,\n                    votePerRoundPerPlayer: {\n                      ...state.currentRoom.votePerRoundPerPlayer,\n                      [currentRound]: Object.fromEntries(\n                        currentPlayers.map(player => [player, null])\n                      ),\n                    },\n                  } as RoomModel,\n                };\n              } else {\n                return {};\n              }\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    function getPlayers(name: string) {\n      console.debug('getPlayers', name);\n      return roomService.getPlayers(name).pipe(\n        tapResponse({\n          next: ({ player, isDeleted }) => {\n            console.debug('service getPlayers', name, player, isDeleted);\n            patchState(store, state => {\n              if (isDeleted) {\n                const { [player]: removedKey, ...roundVoteWithoutPlayer } =\n                  state.currentRoom.votePerRoundPerPlayer[\n                    state.currentRoom.currentRound\n                  ];\n                if (\n                  Object.values(roundVoteWithoutPlayer).every(\n                    voteOption => voteOption !== null\n                  )\n                ) {\n                  // without that player, all votes have been received\n                  launchCountdown(environment.defaultCountdown);\n                }\n                return {\n                  currentRoom: {\n                    ...state.currentRoom,\n                    votePerRoundPerPlayer: {\n                      ...state.currentRoom.votePerRoundPerPlayer,\n                      [state.currentRoom.currentRound]: roundVoteWithoutPlayer,\n                    },\n                  } as RoomModel,\n                };\n              }\n              stopCountdown();\n              return {\n                currentRoom: {\n                  ...state.currentRoom,\n                  votePerRoundPerPlayer: {\n                    ...state.currentRoom.votePerRoundPerPlayer,\n                    [state.currentRoom.currentRound]: {\n                      ...state.currentRoom.votePerRoundPerPlayer[\n                        state.currentRoom.currentRound\n                      ],\n                      [player]: null,\n                    },\n                  },\n                },\n              };\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    function getVotes(name: string) {\n      console.debug('getVotes', name);\n      return roomService.getVotes(name).pipe(\n        tapResponse({\n          next: ({ roundNumber, player, voteOption }) => {\n            console.debug(\n              'service getVotes',\n              name,\n              roundNumber,\n              player,\n              voteOption\n            );\n            patchState(store, state => {\n              const newResult = {\n                ...state.currentRoom.votePerRoundPerPlayer[roundNumber],\n                [player]: voteOption,\n              };\n              if (\n                Object.values(newResult).every(\n                  voteOption => voteOption !== null\n                )\n              ) {\n                // all votes have been received\n                launchCountdown(environment.defaultCountdown);\n              }\n              return {\n                currentRoom: {\n                  ...state.currentRoom,\n                  votePerRoundPerPlayer: {\n                    ...state.currentRoom.votePerRoundPerPlayer,\n                    [roundNumber]: newResult,\n                  },\n                } as RoomModel,\n              };\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    return {\n      listAll: rxMethod<void>(\n        exhaustMap(() => {\n          console.debug('listAll');\n          return roomService.listAll().pipe(\n            tapResponse({\n              next: (availableRoom: string) =>\n                patchState(store, state => ({\n                  availableRooms: [...state.availableRooms, availableRoom],\n                })),\n              error: console.error,\n            })\n          );\n        })\n      ),\n\n      addPlayerToRoom(\n        playerName: string,\n        onComplete: (() => void) | undefined = undefined\n      ): void {\n        const state = getState(store);\n        console.debug('addPlayerToRoom', state.currentRoom.name, playerName);\n        roomService.addPlayerToRoom(\n          state.currentRoom.name,\n          playerName,\n          onComplete\n        );\n      },\n\n      removePlayerFromRoom(playerName: string): void {\n        const state = getState(store);\n        console.debug(\n          'removePlayerFromRoom',\n          state.currentRoom.name,\n          playerName\n        );\n        roomService.removePlayerFromRoom(state.currentRoom.name, playerName);\n      },\n\n      vote(user: UserModel | null, voteOption: VoteChoice): void {\n        const state = getState(store);\n        console.debug('vote', state.currentRoom, user, voteOption);\n        roomService.vote(\n          state.currentRoom.name,\n          state.currentRoom.currentRound,\n          user,\n          voteOption\n        );\n      },\n\n      incrementRound(): void {\n        const state = getState(store);\n        console.debug('incrementRound', state.currentRoom.currentRound);\n        roomService.setRound(\n          state.currentRoom.name,\n          state.currentRoom.currentRound + 1\n        );\n      },\n\n      getOne: rxMethod<string>(\n        exhaustMap((name: string) => {\n          console.debug('getOne', name);\n          patchState(store, state => ({\n            currentRoom: {\n              ...state.currentRoom,\n              name,\n            } as RoomModel,\n          }));\n          return merge(getPlayers(name), getCurrentRound(name), getVotes(name));\n        })\n      ),\n\n      launchCountdown,\n      stopCountdown,\n    };\n  })\n)"
      },
      {
        "name": "storeRegistry",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "signal<Record<string, Signal<unknown>>>({})"
      },
      {
        "name": "synchronizationInitialized",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "false"
      },
      {
        "name": "UserRoleEnumChoices",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/user/user.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "enumArray(UserRoleEnum)"
      },
      {
        "name": "UserStore",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/user/user.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "signalStore(\n  withDevtools('users'),\n  withState<UserState>(initialState),\n  withComputed(({ user }) => ({\n    userDisplayRole: computed(() => {\n      const currentUser = user();\n      if (currentUser != null) {\n        return UserRoleEnum[currentUser.role];\n      }\n      return null;\n    }),\n  })),\n  withMethods(store => ({\n    syncCachedUser(): void {\n      const savedUser: string | null = localStorage.getItem('user');\n      if (savedUser) {\n        const user: UserModel = JSON.parse(savedUser);\n        patchState(store, () => ({ user }));\n      }\n    },\n    setUser(user: UserModel): void {\n      patchState(store, () => ({ user }));\n      localStorage.setItem('user', JSON.stringify(user));\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      store.syncCachedUser();\n    },\n  })\n)"
      },
      {
        "name": "voteChoices",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/libs/data-models/room/room.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "[\n  '0',\n  '0.5',\n  '1',\n  '2',\n  '3',\n  '5',\n  '8',\n  '13+',\n  '?',\n] as const"
      }
    ],
    "functions": [
      {
        "name": "enumArray",
        "file": "src/libs/utils/utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "obj",
            "type": "TEnum",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "K[]",
        "jsdoctags": [
          {
            "name": "obj",
            "type": "TEnum",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "forbiddenValuesValidator",
        "file": "src/libs/utils/validators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "forbiddenValues",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "ValidatorFn",
        "jsdoctags": [
          {
            "name": "forbiddenValues",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getStoreSignal",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "Signal<>",
        "jsdoctags": [
          {
            "name": "store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getValueFromSymbol",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "obj",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "symbol",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "obj",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "symbol",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "initSynchronization",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": []
      },
      {
        "name": "reset",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>required for testing. is not exported during build</p>\n",
        "args": []
      },
      {
        "name": "withDevtools",
        "file": "src/libs/utils/with-devtools.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "name",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "SignalStoreFeature<Input, EmptyFeatureResult>",
        "jsdoctags": [
          {
            "name": {
              "pos": 2246,
              "end": 2250,
              "flags": 16777216,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 80,
              "escapedText": "name"
            },
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 2240,
              "end": 2245,
              "flags": 16777216,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 80,
              "escapedText": "param"
            },
            "comment": "<p>store&#39;s name as it should appear in the DevTools</p>\n"
          }
        ]
      }
    ],
    "typealiases": [
      {
        "name": "Action",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "ConnectResponse",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "EmptyFeatureResult",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/utils/with-devtools.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "EnumType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/utils/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "EnumValueType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": " | string",
        "file": "src/libs/utils/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "RoomModel",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/data-models/room/room.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "RoomState",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/data-models/room/room.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "RoomStore",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "InstanceType<>",
        "file": "src/libs/data-models/room/room.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<PokerCardComponent>",
        "file": "src/stories/poker-card.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "UserModel",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/data-models/user/user.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "UserState",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/libs/data-models/user/user.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "UserStore",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "InstanceType<>",
        "file": "src/libs/data-models/user/user.store.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "VoteChoice",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "src/libs/data-models/room/room.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 199
      }
    ],
    "enumerations": [
      {
        "name": "UserRoleEnum",
        "childs": [
          {
            "name": "Player",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "Observer",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/libs/data-models/user/user.model.ts"
      }
    ],
    "groupedVariables": {
      "src/app/app.config.ts": [
        {
          "name": "appConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ApplicationConfig",
          "defaultValue": "{\n  providers: [\n    provideRouter(routes, withComponentInputBinding()),\n    { provide: TitleStrategy, useClass: TemplatePageTitleStrategy },\n    provideAnimationsAsync(),\n    importProvidersFrom(MqttModule.forRoot(environment.mqttConfigOptions)),\n  ],\n}"
        }
      ],
      "src/libs/utils/with-devtools.ts": [
        {
          "name": "connection",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ConnectResponse | undefined"
        },
        {
          "name": "currentActionNames",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new Set<string>()"
        },
        {
          "name": "storeRegistry",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "signal<Record<string, Signal<unknown>>>({})"
        },
        {
          "name": "synchronizationInitialized",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "false"
        }
      ],
      "src/stories/poker-card.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/poker-card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  // waiting for https://github.com/storybookjs/storybook/issues/25784 to remove ts annotation\n  args: {\n    // @ts-expect-error waiting for storybook support of angular input signal\n    content: 'Test',\n    // @ts-expect-error waiting for storybook support of angular input signal\n    size: 'S',\n    // @ts-expect-error waiting for storybook support of angular input signal\n    disabled: false,\n    // @ts-expect-error waiting for storybook support of angular input signal\n    private: false,\n    // @ts-expect-error waiting for storybook support of angular input signal\n    active: false,\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/poker-card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<PokerCardComponent>",
          "defaultValue": "{\n  title: 'PokerCard',\n  component: PokerCardComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    content: { type: 'string' },\n    size: { type: { name: 'enum', value: ['S', 'L'] } },\n    disabled: { type: 'boolean' },\n    private: { type: 'boolean' },\n    active: { type: 'boolean' },\n  },\n}"
        }
      ],
      "src/environments/environment.production.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.production.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EnvironmentConfig",
          "defaultValue": "{\n  appVersion: '#RELEASE_VERSION',\n  production: false,\n  env: 'production',\n\n  defaultCountdown: 3,\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: '#MQTT_HOST',\n    username: '#MQTT_USER',\n    password: '#MQTT_PWD',\n  },\n}"
        }
      ],
      "src/environments/environment.staging.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.staging.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EnvironmentConfig",
          "defaultValue": "{\n  appVersion: '#RELEASE_VERSION',\n  production: true,\n  env: 'staging',\n\n  defaultCountdown: 3,\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: '#MQTT_HOST',\n    username: '#MQTT_USER',\n    password: '#MQTT_PWD',\n  },\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EnvironmentConfig",
          "defaultValue": "{\n  appVersion: 'dev',\n  production: false,\n  env: 'dev',\n\n  defaultCountdown: 3,\n  mqttConfigOptions: {\n    ...mqttDefaults,\n    hostname: 'localhost',\n    username: 'user',\n    password: 'password',\n  },\n}"
        }
      ],
      "src/environments/environment-type.ts": [
        {
          "name": "ENVIRONMENT_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment-type.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken('ENVIRONMENT_CONFIG')"
        },
        {
          "name": "mqttDefaults",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment-type.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IMqttServiceOptions",
          "defaultValue": "{\n  port: 8080,\n  path: '/mqtt',\n  protocolVersion: 5,\n}"
        }
      ],
      "src/libs/data-models/user/user.store.ts": [
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/user/user.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "UserState",
          "defaultValue": "{\n  user: null,\n}"
        },
        {
          "name": "UserStore",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/user/user.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "signalStore(\n  withDevtools('users'),\n  withState<UserState>(initialState),\n  withComputed(({ user }) => ({\n    userDisplayRole: computed(() => {\n      const currentUser = user();\n      if (currentUser != null) {\n        return UserRoleEnum[currentUser.role];\n      }\n      return null;\n    }),\n  })),\n  withMethods(store => ({\n    syncCachedUser(): void {\n      const savedUser: string | null = localStorage.getItem('user');\n      if (savedUser) {\n        const user: UserModel = JSON.parse(savedUser);\n        patchState(store, () => ({ user }));\n      }\n    },\n    setUser(user: UserModel): void {\n      patchState(store, () => ({ user }));\n      localStorage.setItem('user', JSON.stringify(user));\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      store.syncCachedUser();\n    },\n  })\n)"
        }
      ],
      "src/libs/data-models/room/room.store.ts": [
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/room/room.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "RoomState",
          "defaultValue": "{\n  currentRoom: roomDefault,\n  availableRooms: [],\n  countdown: null,\n}"
        },
        {
          "name": "RoomStore",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/room/room.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "signalStore(\n  withDevtools('rooms'),\n  withState<RoomState>(initialState),\n  withComputed(({ currentRoom }) => ({\n    currentVotes: computed(\n      () => currentRoom.votePerRoundPerPlayer()[currentRoom.currentRound()]\n    ),\n    historyVotes: computed(() => {\n      return Object.fromEntries(\n        Object.entries(currentRoom.votePerRoundPerPlayer()).filter(\n          ([round]) => Number(round) != currentRoom.currentRound()\n        )\n      );\n    }),\n    currentPlayers: computed(() =>\n      Object.keys(\n        currentRoom.votePerRoundPerPlayer()[currentRoom.currentRound()]\n      )\n    ),\n  })),\n  withMethods((store, roomService = inject(RoomService)) => {\n    const launchCountdown = rxMethod<number | null>(\n      switchMap(countdownSeconds => {\n        console.debug('launchCountdown', countdownSeconds);\n        if (countdownSeconds === null) {\n          return EMPTY;\n        }\n        return timer(0, 1000).pipe(\n          scan(acc => --acc, countdownSeconds + 1),\n          take(countdownSeconds + 1),\n          tap(countdown => {\n            console.debug('countdown', countdown);\n            patchState(store, () => ({\n              countdown,\n            }));\n          })\n        );\n      })\n    );\n    const stopCountdown = rxMethod<void>(\n      switchMap(() => {\n        // workaround to make countdown stop instead of using launchCountdown.unsubscribe\n        // because it seems to prevent countdown from being started ever again afterward\n        launchCountdown(null);\n        // no idea why this is necessary instead of synchronously calling patchState...\n        return timer(0, 1000).pipe(\n          take(1),\n          tap(() =>\n            patchState(store, () => ({\n              countdown: null,\n            }))\n          )\n        );\n      })\n    );\n\n    function getCurrentRound(name: string) {\n      console.debug('getCurrentRound', name);\n      return roomService.getCurrentRound(name).pipe(\n        tapResponse({\n          next: (currentRound: number) => {\n            console.debug('service getCurrentRound', name, currentRound);\n            patchState(store, state => {\n              if (state.currentRoom.currentRound !== currentRound) {\n                const currentPlayers = Object.keys(\n                  state.currentRoom.votePerRoundPerPlayer[\n                    state.currentRoom.currentRound\n                  ]\n                );\n                // update round, clone player\n                return {\n                  countdown: null,\n                  currentRoom: {\n                    ...state.currentRoom,\n                    currentRound,\n                    votePerRoundPerPlayer: {\n                      ...state.currentRoom.votePerRoundPerPlayer,\n                      [currentRound]: Object.fromEntries(\n                        currentPlayers.map(player => [player, null])\n                      ),\n                    },\n                  } as RoomModel,\n                };\n              } else {\n                return {};\n              }\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    function getPlayers(name: string) {\n      console.debug('getPlayers', name);\n      return roomService.getPlayers(name).pipe(\n        tapResponse({\n          next: ({ player, isDeleted }) => {\n            console.debug('service getPlayers', name, player, isDeleted);\n            patchState(store, state => {\n              if (isDeleted) {\n                const { [player]: removedKey, ...roundVoteWithoutPlayer } =\n                  state.currentRoom.votePerRoundPerPlayer[\n                    state.currentRoom.currentRound\n                  ];\n                if (\n                  Object.values(roundVoteWithoutPlayer).every(\n                    voteOption => voteOption !== null\n                  )\n                ) {\n                  // without that player, all votes have been received\n                  launchCountdown(environment.defaultCountdown);\n                }\n                return {\n                  currentRoom: {\n                    ...state.currentRoom,\n                    votePerRoundPerPlayer: {\n                      ...state.currentRoom.votePerRoundPerPlayer,\n                      [state.currentRoom.currentRound]: roundVoteWithoutPlayer,\n                    },\n                  } as RoomModel,\n                };\n              }\n              stopCountdown();\n              return {\n                currentRoom: {\n                  ...state.currentRoom,\n                  votePerRoundPerPlayer: {\n                    ...state.currentRoom.votePerRoundPerPlayer,\n                    [state.currentRoom.currentRound]: {\n                      ...state.currentRoom.votePerRoundPerPlayer[\n                        state.currentRoom.currentRound\n                      ],\n                      [player]: null,\n                    },\n                  },\n                },\n              };\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    function getVotes(name: string) {\n      console.debug('getVotes', name);\n      return roomService.getVotes(name).pipe(\n        tapResponse({\n          next: ({ roundNumber, player, voteOption }) => {\n            console.debug(\n              'service getVotes',\n              name,\n              roundNumber,\n              player,\n              voteOption\n            );\n            patchState(store, state => {\n              const newResult = {\n                ...state.currentRoom.votePerRoundPerPlayer[roundNumber],\n                [player]: voteOption,\n              };\n              if (\n                Object.values(newResult).every(\n                  voteOption => voteOption !== null\n                )\n              ) {\n                // all votes have been received\n                launchCountdown(environment.defaultCountdown);\n              }\n              return {\n                currentRoom: {\n                  ...state.currentRoom,\n                  votePerRoundPerPlayer: {\n                    ...state.currentRoom.votePerRoundPerPlayer,\n                    [roundNumber]: newResult,\n                  },\n                } as RoomModel,\n              };\n            });\n          },\n          error: console.error,\n        })\n      );\n    }\n\n    return {\n      listAll: rxMethod<void>(\n        exhaustMap(() => {\n          console.debug('listAll');\n          return roomService.listAll().pipe(\n            tapResponse({\n              next: (availableRoom: string) =>\n                patchState(store, state => ({\n                  availableRooms: [...state.availableRooms, availableRoom],\n                })),\n              error: console.error,\n            })\n          );\n        })\n      ),\n\n      addPlayerToRoom(\n        playerName: string,\n        onComplete: (() => void) | undefined = undefined\n      ): void {\n        const state = getState(store);\n        console.debug('addPlayerToRoom', state.currentRoom.name, playerName);\n        roomService.addPlayerToRoom(\n          state.currentRoom.name,\n          playerName,\n          onComplete\n        );\n      },\n\n      removePlayerFromRoom(playerName: string): void {\n        const state = getState(store);\n        console.debug(\n          'removePlayerFromRoom',\n          state.currentRoom.name,\n          playerName\n        );\n        roomService.removePlayerFromRoom(state.currentRoom.name, playerName);\n      },\n\n      vote(user: UserModel | null, voteOption: VoteChoice): void {\n        const state = getState(store);\n        console.debug('vote', state.currentRoom, user, voteOption);\n        roomService.vote(\n          state.currentRoom.name,\n          state.currentRoom.currentRound,\n          user,\n          voteOption\n        );\n      },\n\n      incrementRound(): void {\n        const state = getState(store);\n        console.debug('incrementRound', state.currentRoom.currentRound);\n        roomService.setRound(\n          state.currentRoom.name,\n          state.currentRoom.currentRound + 1\n        );\n      },\n\n      getOne: rxMethod<string>(\n        exhaustMap((name: string) => {\n          console.debug('getOne', name);\n          patchState(store, state => ({\n            currentRoom: {\n              ...state.currentRoom,\n              name,\n            } as RoomModel,\n          }));\n          return merge(getPlayers(name), getCurrentRound(name), getVotes(name));\n        })\n      ),\n\n      launchCountdown,\n      stopCountdown,\n    };\n  })\n)"
        }
      ],
      ".storybook/preview.ts": [
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": ".storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
        }
      ],
      "src/app/app.routes.ts": [
        {
          "name": "resolvedRoomTitle",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.routes.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ResolveFn<string>",
          "defaultValue": "(route: ActivatedRouteSnapshot) =>\n  `Room ${route.paramMap.get('roomName')}`"
        }
      ],
      "src/libs/data-models/room/room.model.ts": [
        {
          "name": "roomDefault",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/room/room.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "{\n  currentRound: 0,\n  votePerRoundPerPlayer: { 0: {} },\n  name: '',\n} as RoomModel"
        },
        {
          "name": "voteChoices",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/room/room.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "[\n  '0',\n  '0.5',\n  '1',\n  '2',\n  '3',\n  '5',\n  '8',\n  '13+',\n  '?',\n] as const"
        }
      ],
      "src/libs/data-models/user/user.model.ts": [
        {
          "name": "UserRoleEnumChoices",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/libs/data-models/user/user.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "enumArray(UserRoleEnum)"
        }
      ]
    },
    "groupedFunctions": {
      "src/libs/utils/utils.ts": [
        {
          "name": "enumArray",
          "file": "src/libs/utils/utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "obj",
              "type": "TEnum",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "K[]",
          "jsdoctags": [
            {
              "name": "obj",
              "type": "TEnum",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/libs/utils/validators.ts": [
        {
          "name": "forbiddenValuesValidator",
          "file": "src/libs/utils/validators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "forbiddenValues",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "ValidatorFn",
          "jsdoctags": [
            {
              "name": "forbiddenValues",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/libs/utils/with-devtools.ts": [
        {
          "name": "getStoreSignal",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "store",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "Signal<>",
          "jsdoctags": [
            {
              "name": "store",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getValueFromSymbol",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "obj",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "symbol",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "obj",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "symbol",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initSynchronization",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": []
        },
        {
          "name": "reset",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>required for testing. is not exported during build</p>\n",
          "args": []
        },
        {
          "name": "withDevtools",
          "file": "src/libs/utils/with-devtools.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "SignalStoreFeature<Input, EmptyFeatureResult>",
          "jsdoctags": [
            {
              "name": {
                "pos": 2246,
                "end": 2250,
                "flags": 16777216,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "name"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2240,
                "end": 2245,
                "flags": 16777216,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "param"
              },
              "comment": "<p>store&#39;s name as it should appear in the DevTools</p>\n"
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {
      "src/libs/data-models/user/user.model.ts": [
        {
          "name": "UserRoleEnum",
          "childs": [
            {
              "name": "Player",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "Observer",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/libs/data-models/user/user.model.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "src/libs/utils/with-devtools.ts": [
        {
          "name": "Action",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "ConnectResponse",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "EmptyFeatureResult",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/utils/with-devtools.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ],
      "src/libs/utils/utils.ts": [
        {
          "name": "EnumType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/utils/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "EnumValueType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": " | string",
          "file": "src/libs/utils/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/libs/data-models/room/room.model.ts": [
        {
          "name": "RoomModel",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/data-models/room/room.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "VoteChoice",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "src/libs/data-models/room/room.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 199
        }
      ],
      "src/libs/data-models/room/room.store.ts": [
        {
          "name": "RoomState",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/data-models/room/room.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "RoomStore",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "InstanceType<>",
          "file": "src/libs/data-models/room/room.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/stories/poker-card.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<PokerCardComponent>",
          "file": "src/stories/poker-card.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "src/libs/data-models/user/user.model.ts": [
        {
          "name": "UserModel",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/data-models/user/user.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ],
      "src/libs/data-models/user/user.store.ts": [
        {
          "name": "UserState",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/libs/data-models/user/user.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "UserStore",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "InstanceType<>",
          "file": "src/libs/data-models/user/user.store.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 2,
    "status": "low",
    "files": [
      {
        "filePath": ".storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/app.config.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TemplatePageTitleStrategy",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/app.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "appConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.routes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "resolvedRoomTitle",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/lobby/lobby.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LobbyComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/lobby/room-list-dialog/room-list-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RoomListDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/page-not-found/page-not-found.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageNotFoundComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/room/poker-card/poker-card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PokerCardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/room/poker-table/poker-table.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PokerTableComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/room/room-timer/room-timer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RoomTimerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/room/room.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RoomComponent",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/room/share-room/share-room.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ShareRoomComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/room/vote-history/vote-history.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "VoteHistoryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/user/user-creation-dialog/user-creation-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserCreationDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/user/user-deck/user-deck.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserDeckComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/user/user-profile/user-settings.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserSettingsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment-type.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "EnvironmentConfig",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment-type.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ENVIRONMENT_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment-type.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "mqttDefaults",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.production.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.staging.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "roomDefault",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "voteChoices",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "RoomService",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.store.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/room/room.store.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "RoomStore",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/user/user.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UserRoleEnumChoices",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/user/user.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserService",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/user/user.store.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/data-models/user/user.store.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UserStore",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/utils.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "enumArray",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/validators.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "forbiddenValuesValidator",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Window",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getStoreSignal",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "getValueFromSymbol",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "initSynchronization",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "reset",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "withDevtools",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "connection",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "currentActionNames",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "storeRegistry",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/libs/utils/with-devtools.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "synchronizationInitialized",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/poker-card.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/poker-card.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
